//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_AnimatorWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Animator), typeof(UnityEngine.Behaviour));
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetFloat0", GetFloat0);
		L.RegFunction("GetFloat1", GetFloat1);
		L.RegFunction("SetFloat", SetFloat);
		L.RegFunction("SetFloat0", SetFloat0);
		L.RegFunction("SetFloat1", SetFloat1);
		L.RegFunction("SetFloat2", SetFloat2);
		L.RegFunction("SetFloat3", SetFloat3);
		L.RegFunction("GetBool", GetBool);
		L.RegFunction("GetBool0", GetBool0);
		L.RegFunction("GetBool1", GetBool1);
		L.RegFunction("SetBool", SetBool);
		L.RegFunction("SetBool0", SetBool0);
		L.RegFunction("SetBool1", SetBool1);
		L.RegFunction("GetInteger", GetInteger);
		L.RegFunction("GetInteger0", GetInteger0);
		L.RegFunction("GetInteger1", GetInteger1);
		L.RegFunction("SetInteger", SetInteger);
		L.RegFunction("SetInteger0", SetInteger0);
		L.RegFunction("SetInteger1", SetInteger1);
		L.RegFunction("SetTrigger", SetTrigger);
		L.RegFunction("SetTrigger0", SetTrigger0);
		L.RegFunction("SetTrigger1", SetTrigger1);
		L.RegFunction("ResetTrigger", ResetTrigger);
		L.RegFunction("ResetTrigger0", ResetTrigger0);
		L.RegFunction("ResetTrigger1", ResetTrigger1);
		L.RegFunction("IsParameterControlledByCurve", IsParameterControlledByCurve);
		L.RegFunction("IsParameterControlledByCurve0", IsParameterControlledByCurve0);
		L.RegFunction("IsParameterControlledByCurve1", IsParameterControlledByCurve1);
		L.RegFunction("GetIKPosition", GetIKPosition);
		L.RegFunction("SetIKPosition", SetIKPosition);
		L.RegFunction("GetIKRotation", GetIKRotation);
		L.RegFunction("SetIKRotation", SetIKRotation);
		L.RegFunction("GetIKPositionWeight", GetIKPositionWeight);
		L.RegFunction("SetIKPositionWeight", SetIKPositionWeight);
		L.RegFunction("GetIKRotationWeight", GetIKRotationWeight);
		L.RegFunction("SetIKRotationWeight", SetIKRotationWeight);
		L.RegFunction("GetIKHintPosition", GetIKHintPosition);
		L.RegFunction("SetIKHintPosition", SetIKHintPosition);
		L.RegFunction("GetIKHintPositionWeight", GetIKHintPositionWeight);
		L.RegFunction("SetIKHintPositionWeight", SetIKHintPositionWeight);
		L.RegFunction("SetLookAtPosition", SetLookAtPosition);
		L.RegFunction("SetLookAtWeight", SetLookAtWeight);
		L.RegFunction("SetLookAtWeight0", SetLookAtWeight0);
		L.RegFunction("SetLookAtWeight1", SetLookAtWeight1);
		L.RegFunction("SetLookAtWeight2", SetLookAtWeight2);
		L.RegFunction("SetLookAtWeight3", SetLookAtWeight3);
		L.RegFunction("SetLookAtWeight4", SetLookAtWeight4);
		L.RegFunction("SetBoneLocalRotation", SetBoneLocalRotation);
		L.RegFunction("GetBehaviours", GetBehaviours);
		L.RegFunction("GetLayerName", GetLayerName);
		L.RegFunction("GetLayerIndex", GetLayerIndex);
		L.RegFunction("GetLayerWeight", GetLayerWeight);
		L.RegFunction("SetLayerWeight", SetLayerWeight);
		L.RegFunction("GetCurrentAnimatorStateInfo", GetCurrentAnimatorStateInfo);
		L.RegFunction("GetNextAnimatorStateInfo", GetNextAnimatorStateInfo);
		L.RegFunction("GetAnimatorTransitionInfo", GetAnimatorTransitionInfo);
		L.RegFunction("GetCurrentAnimatorClipInfoCount", GetCurrentAnimatorClipInfoCount);
		L.RegFunction("GetNextAnimatorClipInfoCount", GetNextAnimatorClipInfoCount);
		L.RegFunction("GetCurrentAnimatorClipInfo", GetCurrentAnimatorClipInfo);
		L.RegFunction("GetCurrentAnimatorClipInfo0", GetCurrentAnimatorClipInfo0);
		L.RegFunction("GetCurrentAnimatorClipInfo1", GetCurrentAnimatorClipInfo1);
		L.RegFunction("GetNextAnimatorClipInfo", GetNextAnimatorClipInfo);
		L.RegFunction("GetNextAnimatorClipInfo0", GetNextAnimatorClipInfo0);
		L.RegFunction("GetNextAnimatorClipInfo1", GetNextAnimatorClipInfo1);
		L.RegFunction("IsInTransition", IsInTransition);
		L.RegFunction("GetParameter", GetParameter);
		L.RegFunction("MatchTarget", MatchTarget);
		L.RegFunction("MatchTarget0", MatchTarget0);
		L.RegFunction("MatchTarget1", MatchTarget1);
		L.RegFunction("InterruptMatchTarget", InterruptMatchTarget);
		L.RegFunction("InterruptMatchTarget0", InterruptMatchTarget0);
		L.RegFunction("InterruptMatchTarget1", InterruptMatchTarget1);
		L.RegFunction("CrossFadeInFixedTime", CrossFadeInFixedTime);
		L.RegFunction("CrossFadeInFixedTime0", CrossFadeInFixedTime0);
		L.RegFunction("CrossFadeInFixedTime1", CrossFadeInFixedTime1);
		L.RegFunction("CrossFadeInFixedTime2", CrossFadeInFixedTime2);
		L.RegFunction("CrossFadeInFixedTime3", CrossFadeInFixedTime3);
		L.RegFunction("CrossFadeInFixedTime4", CrossFadeInFixedTime4);
		L.RegFunction("CrossFadeInFixedTime5", CrossFadeInFixedTime5);
		L.RegFunction("CrossFadeInFixedTime6", CrossFadeInFixedTime6);
		L.RegFunction("CrossFadeInFixedTime7", CrossFadeInFixedTime7);
		L.RegFunction("CrossFade", CrossFade);
		L.RegFunction("CrossFade0", CrossFade0);
		L.RegFunction("CrossFade1", CrossFade1);
		L.RegFunction("CrossFade2", CrossFade2);
		L.RegFunction("CrossFade3", CrossFade3);
		L.RegFunction("CrossFade4", CrossFade4);
		L.RegFunction("CrossFade5", CrossFade5);
		L.RegFunction("CrossFade6", CrossFade6);
		L.RegFunction("CrossFade7", CrossFade7);
		L.RegFunction("PlayInFixedTime", PlayInFixedTime);
		L.RegFunction("PlayInFixedTime0", PlayInFixedTime0);
		L.RegFunction("PlayInFixedTime1", PlayInFixedTime1);
		L.RegFunction("PlayInFixedTime2", PlayInFixedTime2);
		L.RegFunction("PlayInFixedTime3", PlayInFixedTime3);
		L.RegFunction("PlayInFixedTime4", PlayInFixedTime4);
		L.RegFunction("PlayInFixedTime5", PlayInFixedTime5);
		L.RegFunction("Play", Play);
		L.RegFunction("Play0", Play0);
		L.RegFunction("Play1", Play1);
		L.RegFunction("Play2", Play2);
		L.RegFunction("Play3", Play3);
		L.RegFunction("Play4", Play4);
		L.RegFunction("Play5", Play5);
		L.RegFunction("SetTarget", SetTarget);
		L.RegFunction("GetBoneTransform", GetBoneTransform);
		L.RegFunction("StartPlayback", StartPlayback);
		L.RegFunction("StopPlayback", StopPlayback);
		L.RegFunction("StartRecording", StartRecording);
		L.RegFunction("StopRecording", StopRecording);
		L.RegFunction("HasState", HasState);
		L.RegFunction("StringToHash", StringToHash);
		L.RegFunction("Update", Update);
		L.RegFunction("Rebind", Rebind);
		L.RegFunction("ApplyBuiltinRootMotion", ApplyBuiltinRootMotion);
		L.RegFunction("New", _CreateUnityEngine_Animator);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("isOptimizable", get_isOptimizable, null);
		L.RegFunction("getisOptimizable", get_isOptimizable);
		L.RegVar("isHuman", get_isHuman, null);
		L.RegFunction("getisHuman", get_isHuman);
		L.RegVar("hasRootMotion", get_hasRootMotion, null);
		L.RegFunction("gethasRootMotion", get_hasRootMotion);
		L.RegVar("humanScale", get_humanScale, null);
		L.RegFunction("gethumanScale", get_humanScale);
		L.RegVar("isInitialized", get_isInitialized, null);
		L.RegFunction("getisInitialized", get_isInitialized);
		L.RegVar("deltaPosition", get_deltaPosition, null);
		L.RegFunction("getdeltaPosition", get_deltaPosition);
		L.RegVar("deltaRotation", get_deltaRotation, null);
		L.RegFunction("getdeltaRotation", get_deltaRotation);
		L.RegVar("velocity", get_velocity, null);
		L.RegFunction("getvelocity", get_velocity);
		L.RegVar("angularVelocity", get_angularVelocity, null);
		L.RegFunction("getangularVelocity", get_angularVelocity);
		L.RegVar("rootPosition", get_rootPosition, set_rootPosition);
		L.RegFunction("getrootPosition", get_rootPosition);
		L.RegFunction("setrootPosition", set_rootPosition);
		L.RegVar("rootRotation", get_rootRotation, set_rootRotation);
		L.RegFunction("getrootRotation", get_rootRotation);
		L.RegFunction("setrootRotation", set_rootRotation);
		L.RegVar("applyRootMotion", get_applyRootMotion, set_applyRootMotion);
		L.RegFunction("getapplyRootMotion", get_applyRootMotion);
		L.RegFunction("setapplyRootMotion", set_applyRootMotion);
		L.RegVar("linearVelocityBlending", get_linearVelocityBlending, set_linearVelocityBlending);
		L.RegFunction("getlinearVelocityBlending", get_linearVelocityBlending);
		L.RegFunction("setlinearVelocityBlending", set_linearVelocityBlending);
		L.RegVar("updateMode", get_updateMode, set_updateMode);
		L.RegFunction("getupdateMode", get_updateMode);
		L.RegFunction("setupdateMode", set_updateMode);
		L.RegVar("hasTransformHierarchy", get_hasTransformHierarchy, null);
		L.RegFunction("gethasTransformHierarchy", get_hasTransformHierarchy);
		L.RegVar("gravityWeight", get_gravityWeight, null);
		L.RegFunction("getgravityWeight", get_gravityWeight);
		L.RegVar("bodyPosition", get_bodyPosition, set_bodyPosition);
		L.RegFunction("getbodyPosition", get_bodyPosition);
		L.RegFunction("setbodyPosition", set_bodyPosition);
		L.RegVar("bodyRotation", get_bodyRotation, set_bodyRotation);
		L.RegFunction("getbodyRotation", get_bodyRotation);
		L.RegFunction("setbodyRotation", set_bodyRotation);
		L.RegVar("stabilizeFeet", get_stabilizeFeet, set_stabilizeFeet);
		L.RegFunction("getstabilizeFeet", get_stabilizeFeet);
		L.RegFunction("setstabilizeFeet", set_stabilizeFeet);
		L.RegVar("layerCount", get_layerCount, null);
		L.RegFunction("getlayerCount", get_layerCount);
		L.RegVar("parameters", get_parameters, null);
		L.RegFunction("getparameters", get_parameters);
		L.RegVar("parameterCount", get_parameterCount, null);
		L.RegFunction("getparameterCount", get_parameterCount);
		L.RegVar("feetPivotActive", get_feetPivotActive, set_feetPivotActive);
		L.RegFunction("getfeetPivotActive", get_feetPivotActive);
		L.RegFunction("setfeetPivotActive", set_feetPivotActive);
		L.RegVar("pivotWeight", get_pivotWeight, null);
		L.RegFunction("getpivotWeight", get_pivotWeight);
		L.RegVar("pivotPosition", get_pivotPosition, null);
		L.RegFunction("getpivotPosition", get_pivotPosition);
		L.RegVar("isMatchingTarget", get_isMatchingTarget, null);
		L.RegFunction("getisMatchingTarget", get_isMatchingTarget);
		L.RegVar("speed", get_speed, set_speed);
		L.RegFunction("getspeed", get_speed);
		L.RegFunction("setspeed", set_speed);
		L.RegVar("targetPosition", get_targetPosition, null);
		L.RegFunction("gettargetPosition", get_targetPosition);
		L.RegVar("targetRotation", get_targetRotation, null);
		L.RegFunction("gettargetRotation", get_targetRotation);
		L.RegVar("cullingMode", get_cullingMode, set_cullingMode);
		L.RegFunction("getcullingMode", get_cullingMode);
		L.RegFunction("setcullingMode", set_cullingMode);
		L.RegVar("playbackTime", get_playbackTime, set_playbackTime);
		L.RegFunction("getplaybackTime", get_playbackTime);
		L.RegFunction("setplaybackTime", set_playbackTime);
		L.RegVar("recorderStartTime", get_recorderStartTime, set_recorderStartTime);
		L.RegFunction("getrecorderStartTime", get_recorderStartTime);
		L.RegFunction("setrecorderStartTime", set_recorderStartTime);
		L.RegVar("recorderStopTime", get_recorderStopTime, set_recorderStopTime);
		L.RegFunction("getrecorderStopTime", get_recorderStopTime);
		L.RegFunction("setrecorderStopTime", set_recorderStopTime);
		L.RegVar("recorderMode", get_recorderMode, null);
		L.RegFunction("getrecorderMode", get_recorderMode);
		L.RegVar("runtimeAnimatorController", get_runtimeAnimatorController, set_runtimeAnimatorController);
		L.RegFunction("getruntimeAnimatorController", get_runtimeAnimatorController);
		L.RegFunction("setruntimeAnimatorController", set_runtimeAnimatorController);
		L.RegVar("hasBoundPlayables", get_hasBoundPlayables, null);
		L.RegFunction("gethasBoundPlayables", get_hasBoundPlayables);
		L.RegVar("avatar", get_avatar, set_avatar);
		L.RegFunction("getavatar", get_avatar);
		L.RegFunction("setavatar", set_avatar);
		L.RegVar("playableGraph", get_playableGraph, null);
		L.RegFunction("getplayableGraph", get_playableGraph);
		L.RegVar("layersAffectMassCenter", get_layersAffectMassCenter, set_layersAffectMassCenter);
		L.RegFunction("getlayersAffectMassCenter", get_layersAffectMassCenter);
		L.RegFunction("setlayersAffectMassCenter", set_layersAffectMassCenter);
		L.RegVar("leftFeetBottomHeight", get_leftFeetBottomHeight, null);
		L.RegFunction("getleftFeetBottomHeight", get_leftFeetBottomHeight);
		L.RegVar("rightFeetBottomHeight", get_rightFeetBottomHeight, null);
		L.RegFunction("getrightFeetBottomHeight", get_rightFeetBottomHeight);
		L.RegVar("logWarnings", get_logWarnings, set_logWarnings);
		L.RegFunction("getlogWarnings", get_logWarnings);
		L.RegFunction("setlogWarnings", set_logWarnings);
		L.RegVar("fireEvents", get_fireEvents, set_fireEvents);
		L.RegFunction("getfireEvents", get_fireEvents);
		L.RegFunction("setfireEvents", set_fireEvents);
		L.RegVar("keepAnimatorControllerStateOnDisable", get_keepAnimatorControllerStateOnDisable, set_keepAnimatorControllerStateOnDisable);
		L.RegFunction("getkeepAnimatorControllerStateOnDisable", get_keepAnimatorControllerStateOnDisable);
		L.RegFunction("setkeepAnimatorControllerStateOnDisable", set_keepAnimatorControllerStateOnDisable);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Animator(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				var obj = new UnityEngine.Animator();
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Animator.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetFloat0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetFloat1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.GetFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				return SetFloat0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				return SetFloat1(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, float, float, float>(L, 2))
			{
				return SetFloat2(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, float, float, float>(L, 2))
			{
				return SetFloat3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.SetFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.SetFloat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.SetFloat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.SetFloat(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.SetFloat(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetBool0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetBool1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.GetBool");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetBool(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBool1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetBool(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBool(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, bool>(L, 2))
			{
				return SetBool0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, bool>(L, 2))
			{
				return SetBool1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.SetBool");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBool0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			bool arg1 = LuaDLL.lua_toboolean(L, 3);
			obj.SetBool(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBool1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			bool arg1 = LuaDLL.lua_toboolean(L, 3);
			obj.SetBool(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInteger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetInteger0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetInteger1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.GetInteger");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInteger0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetInteger(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInteger1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetInteger(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInteger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				return SetInteger0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				return SetInteger1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.SetInteger");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInteger0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.SetInteger(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInteger1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.SetInteger(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTrigger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return SetTrigger0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return SetTrigger1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.SetTrigger");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTrigger0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			obj.SetTrigger(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTrigger1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			obj.SetTrigger(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetTrigger(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return ResetTrigger0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return ResetTrigger1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.ResetTrigger");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetTrigger0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			obj.ResetTrigger(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetTrigger1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			obj.ResetTrigger(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsParameterControlledByCurve(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return IsParameterControlledByCurve0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return IsParameterControlledByCurve1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.IsParameterControlledByCurve");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsParameterControlledByCurve0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.IsParameterControlledByCurve(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsParameterControlledByCurve1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.IsParameterControlledByCurve(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			obj.SetIKPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKRotation(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
			obj.SetIKRotation(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKPositionWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKPositionWeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKPositionWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetIKPositionWeight(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKRotationWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKRotationWeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKRotationWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKGoal arg0 = (UnityEngine.AvatarIKGoal)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetIKRotationWeight(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKHintPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKHint arg0 = (UnityEngine.AvatarIKHint)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKHintPosition(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKHintPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKHint arg0 = (UnityEngine.AvatarIKHint)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			obj.SetIKHintPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIKHintPositionWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKHint arg0 = (UnityEngine.AvatarIKHint)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetIKHintPositionWeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetIKHintPositionWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarIKHint arg0 = (UnityEngine.AvatarIKHint)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetIKHintPositionWeight(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtPosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.SetLookAtPosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return SetLookAtWeight0(L);
			}
			else if (count == 3)
			{
				return SetLookAtWeight1(L);
			}
			else if (count == 4)
			{
				return SetLookAtWeight2(L);
			}
			else if (count == 5)
			{
				return SetLookAtWeight3(L);
			}
			else if (count == 6)
			{
				return SetLookAtWeight4(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.SetLookAtWeight");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			obj.SetLookAtWeight(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.SetLookAtWeight(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.SetLookAtWeight(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.SetLookAtWeight(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLookAtWeight4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.SetLookAtWeight(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBoneLocalRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.HumanBodyBones arg0 = (UnityEngine.HumanBodyBones)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
			obj.SetBoneLocalRotation(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBehaviours(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			var o = obj.GetBehaviours(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLayerName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetLayerName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLayerIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			var o = obj.GetLayerIndex(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetLayerWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetLayerWeight(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetLayerWeight(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetLayerWeight(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimatorStateInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetCurrentAnimatorStateInfo(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextAnimatorStateInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetNextAnimatorStateInfo(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetAnimatorTransitionInfo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetAnimatorTransitionInfo(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimatorClipInfoCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetCurrentAnimatorClipInfoCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextAnimatorClipInfoCount(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetNextAnimatorClipInfoCount(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimatorClipInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return GetCurrentAnimatorClipInfo0(L);
			}
			else if (count == 3)
			{
				return GetCurrentAnimatorClipInfo1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.GetCurrentAnimatorClipInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimatorClipInfo0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetCurrentAnimatorClipInfo(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetCurrentAnimatorClipInfo1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.AnimatorClipInfo> arg1 = (System.Collections.Generic.List<UnityEngine.AnimatorClipInfo>)ToLua.ToObject(L, 3);
			obj.GetCurrentAnimatorClipInfo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextAnimatorClipInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return GetNextAnimatorClipInfo0(L);
			}
			else if (count == 3)
			{
				return GetNextAnimatorClipInfo1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.GetNextAnimatorClipInfo");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextAnimatorClipInfo0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetNextAnimatorClipInfo(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetNextAnimatorClipInfo1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.AnimatorClipInfo> arg1 = (System.Collections.Generic.List<UnityEngine.AnimatorClipInfo>)ToLua.ToObject(L, 3);
			obj.GetNextAnimatorClipInfo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsInTransition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.IsInTransition(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetParameter(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetParameter(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MatchTarget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 6)
			{
				return MatchTarget0(L);
			}
			else if (count == 7)
			{
				return MatchTarget1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.MatchTarget");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MatchTarget0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
			UnityEngine.AvatarTarget arg2 = (UnityEngine.AvatarTarget)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.MatchTargetWeightMask arg3 = StackTraits<UnityEngine.MatchTargetWeightMask>.To(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.MatchTarget(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MatchTarget1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg1 = ToLua.ToQuaternion(L, 3);
			UnityEngine.AvatarTarget arg2 = (UnityEngine.AvatarTarget)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.MatchTargetWeightMask arg3 = StackTraits<UnityEngine.MatchTargetWeightMask>.To(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 7);
			obj.MatchTarget(arg0, arg1, arg2, arg3, arg4, arg5);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InterruptMatchTarget(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				return InterruptMatchTarget0(L);
			}
			else if (count == 2)
			{
				return InterruptMatchTarget1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.InterruptMatchTarget");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InterruptMatchTarget0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			obj.InterruptMatchTarget();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InterruptMatchTarget1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			bool arg0 = LuaDLL.lua_toboolean(L, 2);
			obj.InterruptMatchTarget(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				return CrossFadeInFixedTime0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				return CrossFadeInFixedTime1(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, float, int>(L, 2))
			{
				return CrossFadeInFixedTime2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float, int>(L, 2))
			{
				return CrossFadeInFixedTime3(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, float, int, float>(L, 2))
			{
				return CrossFadeInFixedTime4(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, float, int, float>(L, 2))
			{
				return CrossFadeInFixedTime5(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<string, float, int, float, float>(L, 2))
			{
				return CrossFadeInFixedTime6(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<int, float, int, float, float>(L, 2))
			{
				return CrossFadeInFixedTime7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.CrossFadeInFixedTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.CrossFadeInFixedTime(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.CrossFadeInFixedTime(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFadeInFixedTime7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.CrossFadeInFixedTime(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				return CrossFade0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				return CrossFade1(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, float, int>(L, 2))
			{
				return CrossFade2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, float, int>(L, 2))
			{
				return CrossFade3(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<string, float, int, float>(L, 2))
			{
				return CrossFade4(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<int, float, int, float>(L, 2))
			{
				return CrossFade5(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<string, float, int, float, float>(L, 2))
			{
				return CrossFade6(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<int, float, int, float, float>(L, 2))
			{
				return CrossFade7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.CrossFade");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.CrossFade(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.CrossFade(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			obj.CrossFade(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			obj.CrossFade(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.CrossFade(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.CrossFade(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.CrossFade(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CrossFade7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 6);
			obj.CrossFade(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return PlayInFixedTime0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return PlayInFixedTime1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				return PlayInFixedTime2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				return PlayInFixedTime3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, float>(L, 2))
			{
				return PlayInFixedTime4(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int, float>(L, 2))
			{
				return PlayInFixedTime5(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.PlayInFixedTime");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			obj.PlayInFixedTime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			obj.PlayInFixedTime(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.PlayInFixedTime(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.PlayInFixedTime(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.PlayInFixedTime(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int PlayInFixedTime5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.PlayInFixedTime(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return Play0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return Play1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				return Play2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				return Play3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<string, int, float>(L, 2))
			{
				return Play4(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, int, float>(L, 2))
			{
				return Play5(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Animator.Play");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			obj.Play(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			obj.Play(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.Play(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.Play(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.Play(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Play5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Animator)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.Play(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTarget(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.AvatarTarget arg0 = (UnityEngine.AvatarTarget)LuaDLL.luaL_checknumber(L, 2);
			float arg1 = (float)LuaDLL.luaL_checknumber(L, 3);
			obj.SetTarget(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetBoneTransform(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			UnityEngine.HumanBodyBones arg0 = (UnityEngine.HumanBodyBones)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetBoneTransform(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartPlayback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			obj.StartPlayback();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopPlayback(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			obj.StopPlayback();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StartRecording(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.StartRecording(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StopRecording(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			obj.StopRecording();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			var o = obj.HasState(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int StringToHash(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			var o = UnityEngine.Animator.StringToHash(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Update(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.Update(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Rebind(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			obj.Rebind();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ApplyBuiltinRootMotion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Animator)ToLua.CheckObject<UnityEngine.Animator>(L, 1);
			obj.ApplyBuiltinRootMotion();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isOptimizable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.isOptimizable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isOptimizable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isHuman(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.isHuman;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isHuman on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasRootMotion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.hasRootMotion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasRootMotion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_humanScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.humanScale;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index humanScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isInitialized(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.isInitialized;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isInitialized on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deltaPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.deltaPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deltaPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deltaRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion ret = obj.deltaRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index deltaRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_velocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.velocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index velocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angularVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.angularVelocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angularVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rootPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.rootPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rootPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rootRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion ret = obj.rootRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rootRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_applyRootMotion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.applyRootMotion;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index applyRootMotion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_linearVelocityBlending(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.linearVelocityBlending;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linearVelocityBlending on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_updateMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorUpdateMode ret = obj.updateMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index updateMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasTransformHierarchy(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.hasTransformHierarchy;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasTransformHierarchy on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gravityWeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.gravityWeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index gravityWeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bodyPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.bodyPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bodyPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bodyRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion ret = obj.bodyRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bodyRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_stabilizeFeet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.stabilizeFeet;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index stabilizeFeet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layerCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			int ret = obj.layerCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layerCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_parameters(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorControllerParameter[] ret = obj.parameters;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index parameters on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_parameterCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			int ret = obj.parameterCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index parameterCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_feetPivotActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.feetPivotActive;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index feetPivotActive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pivotWeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.pivotWeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pivotWeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_pivotPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.pivotPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index pivotPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isMatchingTarget(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.isMatchingTarget;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isMatchingTarget on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.speed;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 ret = obj.targetPosition;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_targetRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion ret = obj.targetRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index targetRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_cullingMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorCullingMode ret = obj.cullingMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cullingMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playbackTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.playbackTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playbackTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recorderStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.recorderStartTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index recorderStartTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recorderStopTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.recorderStopTime;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index recorderStopTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_recorderMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorRecorderMode ret = obj.recorderMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index recorderMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_runtimeAnimatorController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.RuntimeAnimatorController ret = obj.runtimeAnimatorController;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index runtimeAnimatorController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_hasBoundPlayables(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.hasBoundPlayables;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index hasBoundPlayables on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_avatar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Avatar ret = obj.avatar;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index avatar on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_playableGraph(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Playables.PlayableGraph ret = obj.playableGraph;
			ToLua.PushValue(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playableGraph on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_layersAffectMassCenter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.layersAffectMassCenter;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layersAffectMassCenter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_leftFeetBottomHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.leftFeetBottomHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index leftFeetBottomHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rightFeetBottomHeight(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float ret = obj.rightFeetBottomHeight;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rightFeetBottomHeight on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_logWarnings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.logWarnings;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logWarnings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_fireEvents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.fireEvents;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fireEvents on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_keepAnimatorControllerStateOnDisable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool ret = obj.keepAnimatorControllerStateOnDisable;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index keepAnimatorControllerStateOnDisable on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rootPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.rootPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rootPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rootRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.rootRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rootRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_applyRootMotion(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.applyRootMotion = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index applyRootMotion on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_linearVelocityBlending(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.linearVelocityBlending = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index linearVelocityBlending on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_updateMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorUpdateMode arg0 = (UnityEngine.AnimatorUpdateMode)LuaDLL.luaL_checknumber(L, 2);
			obj.updateMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index updateMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bodyPosition(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.bodyPosition = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bodyPosition on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bodyRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.bodyRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index bodyRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_stabilizeFeet(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.stabilizeFeet = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index stabilizeFeet on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_feetPivotActive(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.feetPivotActive = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index feetPivotActive on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_speed(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.speed = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index speed on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_cullingMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.AnimatorCullingMode arg0 = (UnityEngine.AnimatorCullingMode)LuaDLL.luaL_checknumber(L, 2);
			obj.cullingMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index cullingMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_playbackTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.playbackTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index playbackTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recorderStartTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.recorderStartTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index recorderStartTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_recorderStopTime(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.recorderStopTime = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index recorderStopTime on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_runtimeAnimatorController(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.RuntimeAnimatorController arg0 = (UnityEngine.RuntimeAnimatorController)ToLua.CheckObject<UnityEngine.RuntimeAnimatorController>(L, 2);
			obj.runtimeAnimatorController = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index runtimeAnimatorController on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_avatar(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			UnityEngine.Avatar arg0 = (UnityEngine.Avatar)ToLua.CheckObject<UnityEngine.Avatar>(L, 2);
			obj.avatar = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index avatar on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_layersAffectMassCenter(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.layersAffectMassCenter = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index layersAffectMassCenter on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_logWarnings(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.logWarnings = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index logWarnings on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_fireEvents(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.fireEvents = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index fireEvents on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_keepAnimatorControllerStateOnDisable(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Animator obj = (UnityEngine.Animator)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.keepAnimatorControllerStateOnDisable = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index keepAnimatorControllerStateOnDisable on a nil value");
		}
	}
}

