//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_MaterialWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Material), typeof(UnityEngine.Object));
		L.RegFunction("Lerp", Lerp);
		L.RegFunction("SetPass", SetPass);
		L.RegFunction("CopyPropertiesFromMaterial", CopyPropertiesFromMaterial);
		L.RegFunction("HasProperty", HasProperty);
		L.RegFunction("HasProperty0", HasProperty0);
		L.RegFunction("HasProperty1", HasProperty1);
		L.RegFunction("EnableKeyword", EnableKeyword);
		L.RegFunction("DisableKeyword", DisableKeyword);
		L.RegFunction("IsKeywordEnabled", IsKeywordEnabled);
		L.RegFunction("SetShaderPassEnabled", SetShaderPassEnabled);
		L.RegFunction("GetShaderPassEnabled", GetShaderPassEnabled);
		L.RegFunction("GetPassName", GetPassName);
		L.RegFunction("FindPass", FindPass);
		L.RegFunction("SetOverrideTag", SetOverrideTag);
		L.RegFunction("GetTag", GetTag);
		L.RegFunction("GetTag0", GetTag0);
		L.RegFunction("GetTag1", GetTag1);
		L.RegFunction("SetFloat", SetFloat);
		L.RegFunction("SetFloat0", SetFloat0);
		L.RegFunction("SetFloat1", SetFloat1);
		L.RegFunction("SetInt", SetInt);
		L.RegFunction("SetInt0", SetInt0);
		L.RegFunction("SetInt1", SetInt1);
		L.RegFunction("SetColor", SetColor);
		L.RegFunction("SetColor0", SetColor0);
		L.RegFunction("SetColor1", SetColor1);
		L.RegFunction("SetVector", SetVector);
		L.RegFunction("SetVector0", SetVector0);
		L.RegFunction("SetVector1", SetVector1);
		L.RegFunction("SetMatrix", SetMatrix);
		L.RegFunction("SetMatrix0", SetMatrix0);
		L.RegFunction("SetMatrix1", SetMatrix1);
		L.RegFunction("SetTexture", SetTexture);
		L.RegFunction("SetTexture0", SetTexture0);
		L.RegFunction("SetTexture1", SetTexture1);
		L.RegFunction("SetBuffer", SetBuffer);
		L.RegFunction("SetBuffer0", SetBuffer0);
		L.RegFunction("SetBuffer1", SetBuffer1);
		L.RegFunction("SetFloatArray", SetFloatArray);
		L.RegFunction("SetFloatArray0", SetFloatArray0);
		L.RegFunction("SetFloatArray1", SetFloatArray1);
		L.RegFunction("SetFloatArray2", SetFloatArray2);
		L.RegFunction("SetFloatArray3", SetFloatArray3);
		L.RegFunction("SetColorArray", SetColorArray);
		L.RegFunction("SetColorArray0", SetColorArray0);
		L.RegFunction("SetColorArray1", SetColorArray1);
		L.RegFunction("SetColorArray2", SetColorArray2);
		L.RegFunction("SetColorArray3", SetColorArray3);
		L.RegFunction("SetVectorArray", SetVectorArray);
		L.RegFunction("SetVectorArray0", SetVectorArray0);
		L.RegFunction("SetVectorArray1", SetVectorArray1);
		L.RegFunction("SetVectorArray2", SetVectorArray2);
		L.RegFunction("SetVectorArray3", SetVectorArray3);
		L.RegFunction("SetMatrixArray", SetMatrixArray);
		L.RegFunction("SetMatrixArray0", SetMatrixArray0);
		L.RegFunction("SetMatrixArray1", SetMatrixArray1);
		L.RegFunction("SetMatrixArray2", SetMatrixArray2);
		L.RegFunction("SetMatrixArray3", SetMatrixArray3);
		L.RegFunction("GetFloat", GetFloat);
		L.RegFunction("GetFloat0", GetFloat0);
		L.RegFunction("GetFloat1", GetFloat1);
		L.RegFunction("GetInt", GetInt);
		L.RegFunction("GetInt0", GetInt0);
		L.RegFunction("GetInt1", GetInt1);
		L.RegFunction("GetColor", GetColor);
		L.RegFunction("GetColor0", GetColor0);
		L.RegFunction("GetColor1", GetColor1);
		L.RegFunction("GetVector", GetVector);
		L.RegFunction("GetVector0", GetVector0);
		L.RegFunction("GetVector1", GetVector1);
		L.RegFunction("GetMatrix", GetMatrix);
		L.RegFunction("GetMatrix0", GetMatrix0);
		L.RegFunction("GetMatrix1", GetMatrix1);
		L.RegFunction("GetTexture", GetTexture);
		L.RegFunction("GetTexture0", GetTexture0);
		L.RegFunction("GetTexture1", GetTexture1);
		L.RegFunction("GetFloatArray", GetFloatArray);
		L.RegFunction("GetFloatArray0", GetFloatArray0);
		L.RegFunction("GetFloatArray1", GetFloatArray1);
		L.RegFunction("GetFloatArray2", GetFloatArray2);
		L.RegFunction("GetFloatArray3", GetFloatArray3);
		L.RegFunction("GetColorArray", GetColorArray);
		L.RegFunction("GetColorArray0", GetColorArray0);
		L.RegFunction("GetColorArray1", GetColorArray1);
		L.RegFunction("GetColorArray2", GetColorArray2);
		L.RegFunction("GetColorArray3", GetColorArray3);
		L.RegFunction("GetVectorArray", GetVectorArray);
		L.RegFunction("GetVectorArray0", GetVectorArray0);
		L.RegFunction("GetVectorArray1", GetVectorArray1);
		L.RegFunction("GetVectorArray2", GetVectorArray2);
		L.RegFunction("GetVectorArray3", GetVectorArray3);
		L.RegFunction("GetMatrixArray", GetMatrixArray);
		L.RegFunction("GetMatrixArray0", GetMatrixArray0);
		L.RegFunction("GetMatrixArray1", GetMatrixArray1);
		L.RegFunction("GetMatrixArray2", GetMatrixArray2);
		L.RegFunction("GetMatrixArray3", GetMatrixArray3);
		L.RegFunction("SetTextureOffset", SetTextureOffset);
		L.RegFunction("SetTextureOffset0", SetTextureOffset0);
		L.RegFunction("SetTextureOffset1", SetTextureOffset1);
		L.RegFunction("SetTextureScale", SetTextureScale);
		L.RegFunction("SetTextureScale0", SetTextureScale0);
		L.RegFunction("SetTextureScale1", SetTextureScale1);
		L.RegFunction("GetTextureOffset", GetTextureOffset);
		L.RegFunction("GetTextureOffset0", GetTextureOffset0);
		L.RegFunction("GetTextureOffset1", GetTextureOffset1);
		L.RegFunction("GetTextureScale", GetTextureScale);
		L.RegFunction("GetTextureScale0", GetTextureScale0);
		L.RegFunction("GetTextureScale1", GetTextureScale1);
		L.RegFunction("New", _CreateUnityEngine_Material);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("shaderKeywords", get_shaderKeywords, set_shaderKeywords);
		L.RegFunction("getshaderKeywords", get_shaderKeywords);
		L.RegFunction("setshaderKeywords", set_shaderKeywords);
		L.RegVar("shader", get_shader, set_shader);
		L.RegFunction("getshader", get_shader);
		L.RegFunction("setshader", set_shader);
		L.RegVar("color", get_color, set_color);
		L.RegFunction("getcolor", get_color);
		L.RegFunction("setcolor", set_color);
		L.RegVar("mainTexture", get_mainTexture, set_mainTexture);
		L.RegFunction("getmainTexture", get_mainTexture);
		L.RegFunction("setmainTexture", set_mainTexture);
		L.RegVar("mainTextureOffset", get_mainTextureOffset, set_mainTextureOffset);
		L.RegFunction("getmainTextureOffset", get_mainTextureOffset);
		L.RegFunction("setmainTextureOffset", set_mainTextureOffset);
		L.RegVar("mainTextureScale", get_mainTextureScale, set_mainTextureScale);
		L.RegFunction("getmainTextureScale", get_mainTextureScale);
		L.RegFunction("setmainTextureScale", set_mainTextureScale);
		L.RegVar("renderQueue", get_renderQueue, set_renderQueue);
		L.RegFunction("getrenderQueue", get_renderQueue);
		L.RegFunction("setrenderQueue", set_renderQueue);
		L.RegVar("globalIlluminationFlags", get_globalIlluminationFlags, set_globalIlluminationFlags);
		L.RegFunction("getglobalIlluminationFlags", get_globalIlluminationFlags);
		L.RegFunction("setglobalIlluminationFlags", set_globalIlluminationFlags);
		L.RegVar("doubleSidedGI", get_doubleSidedGI, set_doubleSidedGI);
		L.RegFunction("getdoubleSidedGI", get_doubleSidedGI);
		L.RegFunction("setdoubleSidedGI", set_doubleSidedGI);
		L.RegVar("enableInstancing", get_enableInstancing, set_enableInstancing);
		L.RegFunction("getenableInstancing", get_enableInstancing);
		L.RegFunction("setenableInstancing", set_enableInstancing);
		L.RegVar("passCount", get_passCount, null);
		L.RegFunction("getpassCount", get_passCount);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Material(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Shader>(L, 1))
			{
				UnityEngine.Shader arg0 = (UnityEngine.Shader)ToLua.ToObject(L, 1);
				var obj = new UnityEngine.Material(arg0);
				ToLua.Push(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<UnityEngine.Material>(L, 1))
			{
				UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.ToObject(L, 1);
				var obj = new UnityEngine.Material(arg0);
				ToLua.Push(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Material.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Lerp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			UnityEngine.Material arg1 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 3);
			float arg2 = (float)LuaDLL.luaL_checknumber(L, 4);
			obj.Lerp(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetPass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.SetPass(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CopyPropertiesFromMaterial(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			UnityEngine.Material arg0 = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 2);
			obj.CopyPropertiesFromMaterial(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasProperty(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return HasProperty0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return HasProperty1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.HasProperty");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasProperty0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.HasProperty(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int HasProperty1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.HasProperty(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int EnableKeyword(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.EnableKeyword(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int DisableKeyword(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.DisableKeyword(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsKeywordEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			var o = obj.IsKeywordEnabled(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetShaderPassEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
			obj.SetShaderPassEnabled(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetShaderPassEnabled(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			var o = obj.GetShaderPassEnabled(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPassName(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = obj.GetPassName(arg0);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int FindPass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			var o = obj.FindPass(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetOverrideTag(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			var obj = (UnityEngine.Material)ToLua.CheckObject<UnityEngine.Material>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			obj.SetOverrideTag(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTag(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return GetTag0(L);
			}
			else if (count == 4)
			{
				return GetTag1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetTag");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTag0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			bool arg1 = LuaDLL.lua_toboolean(L, 3);
			var o = obj.GetTag(arg0, arg1);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTag1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			bool arg1 = LuaDLL.lua_toboolean(L, 3);
			string arg2 = ToLua.ToString(L, 4);
			var o = obj.GetTag(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, float>(L, 2))
			{
				return SetFloat0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float>(L, 2))
			{
				return SetFloat1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.SetFloat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloat1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			obj.SetFloat(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, int>(L, 2))
			{
				return SetInt0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, int>(L, 2))
			{
				return SetInt1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetInt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInt0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.SetInt(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetInt1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 3);
			obj.SetInt(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Color>(L, 2))
			{
				return SetColor0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Color>(L, 2))
			{
				return SetColor1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			obj.SetColor(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColor1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Color arg1 = ToLua.ToColor(L, 3);
			obj.SetColor(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVector(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Vector4>(L, 2))
			{
				return SetVector0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector4>(L, 2))
			{
				return SetVector1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetVector");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVector0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Vector4 arg1 = ToLua.ToVector4(L, 3);
			obj.SetVector(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVector1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector4 arg1 = ToLua.ToVector4(L, 3);
			obj.SetVector(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrix(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Matrix4x4>(L, 2))
			{
				return SetMatrix0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Matrix4x4>(L, 2))
			{
				return SetMatrix1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetMatrix");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrix0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Matrix4x4 arg1 = StackTraits<UnityEngine.Matrix4x4>.To(L, 3);
			obj.SetMatrix(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrix1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Matrix4x4 arg1 = StackTraits<UnityEngine.Matrix4x4>.To(L, 3);
			obj.SetMatrix(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Texture>(L, 2))
			{
				return SetTexture0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Texture>(L, 2))
			{
				return SetTexture1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
			obj.SetTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTexture1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Texture arg1 = (UnityEngine.Texture)ToLua.ToObject(L, 3);
			obj.SetTexture(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuffer(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.ComputeBuffer>(L, 2))
			{
				return SetBuffer0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.ComputeBuffer>(L, 2))
			{
				return SetBuffer1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetBuffer");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuffer0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.ComputeBuffer arg1 = (UnityEngine.ComputeBuffer)ToLua.ToObject(L, 3);
			obj.SetBuffer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetBuffer1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.ComputeBuffer arg1 = (UnityEngine.ComputeBuffer)ToLua.ToObject(L, 3);
			obj.SetBuffer(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloatArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<float>>(L, 2))
			{
				return SetFloatArray0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<float>>(L, 2))
			{
				return SetFloatArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, float[]>(L, 2))
			{
				return SetFloatArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, float[]>(L, 2))
			{
				return SetFloatArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetFloatArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloatArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<float> arg1 = (System.Collections.Generic.List<float>)ToLua.ToObject(L, 3);
			obj.SetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloatArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<float> arg1 = (System.Collections.Generic.List<float>)ToLua.ToObject(L, 3);
			obj.SetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloatArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			float[] arg1 = ToLua.ToNumberArray<float>(L, 3);
			obj.SetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetFloatArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			float[] arg1 = ToLua.ToNumberArray<float>(L, 3);
			obj.SetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColorArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Color>>(L, 2))
			{
				return SetColorArray0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Color>>(L, 2))
			{
				return SetColorArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Color[]>(L, 2))
			{
				return SetColorArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Color[]>(L, 2))
			{
				return SetColorArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetColorArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColorArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Color> arg1 = (System.Collections.Generic.List<UnityEngine.Color>)ToLua.ToObject(L, 3);
			obj.SetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColorArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Color> arg1 = (System.Collections.Generic.List<UnityEngine.Color>)ToLua.ToObject(L, 3);
			obj.SetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColorArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Color[] arg1 = ToLua.ToStructArray<UnityEngine.Color>(L, 3);
			obj.SetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetColorArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Color[] arg1 = ToLua.ToStructArray<UnityEngine.Color>(L, 3);
			obj.SetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVectorArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Vector4>>(L, 2))
			{
				return SetVectorArray0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Vector4>>(L, 2))
			{
				return SetVectorArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Vector4[]>(L, 2))
			{
				return SetVectorArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector4[]>(L, 2))
			{
				return SetVectorArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetVectorArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVectorArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector4> arg1 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.ToObject(L, 3);
			obj.SetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVectorArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector4> arg1 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.ToObject(L, 3);
			obj.SetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVectorArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Vector4[] arg1 = ToLua.ToStructArray<UnityEngine.Vector4>(L, 3);
			obj.SetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetVectorArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector4[] arg1 = ToLua.ToStructArray<UnityEngine.Vector4>(L, 3);
			obj.SetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrixArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Matrix4x4>>(L, 2))
			{
				return SetMatrixArray0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Matrix4x4>>(L, 2))
			{
				return SetMatrixArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Matrix4x4[]>(L, 2))
			{
				return SetMatrixArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Matrix4x4[]>(L, 2))
			{
				return SetMatrixArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetMatrixArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrixArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Matrix4x4> arg1 = (System.Collections.Generic.List<UnityEngine.Matrix4x4>)ToLua.ToObject(L, 3);
			obj.SetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrixArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Matrix4x4> arg1 = (System.Collections.Generic.List<UnityEngine.Matrix4x4>)ToLua.ToObject(L, 3);
			obj.SetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrixArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Matrix4x4[] arg1 = ToLua.ToStructArray<UnityEngine.Matrix4x4>(L, 3);
			obj.SetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetMatrixArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Matrix4x4[] arg1 = ToLua.ToStructArray<UnityEngine.Matrix4x4>(L, 3);
			obj.SetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetFloat0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetFloat1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetFloat");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloat1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetFloat(arg0);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetInt0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetInt1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetInt");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetInt1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetInt(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetColor0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetColor1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetColor");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColor1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetColor(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetVector0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetVector1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetVector");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetVector(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVector1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetVector(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrix(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetMatrix0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetMatrix1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetMatrix");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrix0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetMatrix(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrix1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetMatrix(arg0);
			ToLua.PushValue(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetTexture0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetTexture1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetTexture");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetTexture(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTexture1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetTexture(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetFloatArray0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetFloatArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<float>>(L, 2))
			{
				return GetFloatArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<float>>(L, 2))
			{
				return GetFloatArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetFloatArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetFloatArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetFloatArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<float> arg1 = (System.Collections.Generic.List<float>)ToLua.ToObject(L, 3);
			obj.GetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetFloatArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<float> arg1 = (System.Collections.Generic.List<float>)ToLua.ToObject(L, 3);
			obj.GetFloatArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetColorArray0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetColorArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Color>>(L, 2))
			{
				return GetColorArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Color>>(L, 2))
			{
				return GetColorArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetColorArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetColorArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetColorArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Color> arg1 = (System.Collections.Generic.List<UnityEngine.Color>)ToLua.ToObject(L, 3);
			obj.GetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetColorArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Color> arg1 = (System.Collections.Generic.List<UnityEngine.Color>)ToLua.ToObject(L, 3);
			obj.GetColorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVectorArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetVectorArray0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetVectorArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Vector4>>(L, 2))
			{
				return GetVectorArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Vector4>>(L, 2))
			{
				return GetVectorArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetVectorArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVectorArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetVectorArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVectorArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetVectorArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVectorArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector4> arg1 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.ToObject(L, 3);
			obj.GetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetVectorArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Vector4> arg1 = (System.Collections.Generic.List<UnityEngine.Vector4>)ToLua.ToObject(L, 3);
			obj.GetVectorArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrixArray(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetMatrixArray0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetMatrixArray1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.Collections.Generic.List<UnityEngine.Matrix4x4>>(L, 2))
			{
				return GetMatrixArray2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, System.Collections.Generic.List<UnityEngine.Matrix4x4>>(L, 2))
			{
				return GetMatrixArray3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetMatrixArray");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrixArray0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetMatrixArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrixArray1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetMatrixArray(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrixArray2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			System.Collections.Generic.List<UnityEngine.Matrix4x4> arg1 = (System.Collections.Generic.List<UnityEngine.Matrix4x4>)ToLua.ToObject(L, 3);
			obj.GetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetMatrixArray3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			System.Collections.Generic.List<UnityEngine.Matrix4x4> arg1 = (System.Collections.Generic.List<UnityEngine.Matrix4x4>)ToLua.ToObject(L, 3);
			obj.GetMatrixArray(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureOffset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Vector2>(L, 2))
			{
				return SetTextureOffset0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector2>(L, 2))
			{
				return SetTextureOffset1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetTextureOffset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureOffset0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			obj.SetTextureOffset(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureOffset1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			obj.SetTextureOffset(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureScale(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3 && TypeChecker.CheckTypes<string, UnityEngine.Vector2>(L, 2))
			{
				return SetTextureScale0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int, UnityEngine.Vector2>(L, 2))
			{
				return SetTextureScale1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.SetTextureScale");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureScale0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			obj.SetTextureScale(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetTextureScale1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector2 arg1 = ToLua.ToVector2(L, 3);
			obj.SetTextureScale(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureOffset(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetTextureOffset0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetTextureOffset1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetTextureOffset");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureOffset0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetTextureOffset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureOffset1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetTextureOffset(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureScale(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				return GetTextureScale0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int>(L, 2))
			{
				return GetTextureScale1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Material.GetTextureScale");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureScale0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			string arg0 = ToLua.ToString(L, 2);
			var o = obj.GetTextureScale(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetTextureScale1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Material)ToLua.ToObject(L, 1);
			int arg0 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = obj.GetTextureScale(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shaderKeywords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			string[] ret = obj.shaderKeywords;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shaderKeywords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_shader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Shader ret = obj.shader;
			ToLua.PushSealed(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Color ret = obj.color;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Texture ret = obj.mainTexture;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainTextureOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Vector2 ret = obj.mainTextureOffset;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTextureOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mainTextureScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Vector2 ret = obj.mainTextureScale;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTextureScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_renderQueue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			int ret = obj.renderQueue;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index renderQueue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_globalIlluminationFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.MaterialGlobalIlluminationFlags ret = obj.globalIlluminationFlags;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index globalIlluminationFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_doubleSidedGI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			bool ret = obj.doubleSidedGI;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index doubleSidedGI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_enableInstancing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			bool ret = obj.enableInstancing;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableInstancing on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_passCount(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			int ret = obj.passCount;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index passCount on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shaderKeywords(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			string[] arg0 = ToLua.CheckStringArray(L, 2);
			obj.shaderKeywords = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shaderKeywords on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_shader(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Shader arg0 = (UnityEngine.Shader)ToLua.CheckObject(L, 2, typeof(UnityEngine.Shader));
			obj.shader = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index shader on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_color(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Color arg0 = ToLua.ToColor(L, 2);
			obj.color = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index color on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mainTexture(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Texture arg0 = (UnityEngine.Texture)ToLua.CheckObject<UnityEngine.Texture>(L, 2);
			obj.mainTexture = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTexture on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mainTextureOffset(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.mainTextureOffset = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTextureOffset on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mainTextureScale(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.Vector2 arg0 = ToLua.ToVector2(L, 2);
			obj.mainTextureScale = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mainTextureScale on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_renderQueue(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.renderQueue = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index renderQueue on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_globalIlluminationFlags(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			UnityEngine.MaterialGlobalIlluminationFlags arg0 = (UnityEngine.MaterialGlobalIlluminationFlags)LuaDLL.luaL_checknumber(L, 2);
			obj.globalIlluminationFlags = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index globalIlluminationFlags on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_doubleSidedGI(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.doubleSidedGI = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index doubleSidedGI on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_enableInstancing(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Material obj = (UnityEngine.Material)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.enableInstancing = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index enableInstancing on a nil value");
		}
	}
}

