//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_PhysicsWrap
{
	public static void Register(LuaState L)
	{
		L.BeginStaticLibs("Physics");
		L.RegFunction("Raycast", Raycast);
		L.RegFunction("Raycast0", Raycast0);
		L.RegFunction("Raycast1", Raycast1);
		L.RegFunction("Raycast2", Raycast2);
		L.RegFunction("Raycast3", Raycast3);
		L.RegFunction("Raycast4", Raycast4);
		L.RegFunction("Raycast5", Raycast5);
		L.RegFunction("Raycast6", Raycast6);
		L.RegFunction("Raycast7", Raycast7);
		L.RegFunction("Raycast8", Raycast8);
		L.RegFunction("Raycast9", Raycast9);
		L.RegFunction("Raycast10", Raycast10);
		L.RegFunction("Raycast11", Raycast11);
		L.RegFunction("Raycast12", Raycast12);
		L.RegFunction("Raycast13", Raycast13);
		L.RegFunction("Raycast14", Raycast14);
		L.RegFunction("Raycast15", Raycast15);
		L.RegFunction("RaycastAll", RaycastAll);
		L.RegFunction("RaycastAll0", RaycastAll0);
		L.RegFunction("RaycastAll1", RaycastAll1);
		L.RegFunction("RaycastAll2", RaycastAll2);
		L.RegFunction("RaycastAll3", RaycastAll3);
		L.RegFunction("RaycastAll4", RaycastAll4);
		L.RegFunction("RaycastAll5", RaycastAll5);
		L.RegFunction("RaycastAll6", RaycastAll6);
		L.RegFunction("RaycastAll7", RaycastAll7);
		L.RegFunction("RaycastNonAlloc", RaycastNonAlloc);
		L.RegFunction("RaycastNonAlloc0", RaycastNonAlloc0);
		L.RegFunction("RaycastNonAlloc1", RaycastNonAlloc1);
		L.RegFunction("RaycastNonAlloc2", RaycastNonAlloc2);
		L.RegFunction("RaycastNonAlloc3", RaycastNonAlloc3);
		L.RegFunction("RaycastNonAlloc4", RaycastNonAlloc4);
		L.RegFunction("RaycastNonAlloc5", RaycastNonAlloc5);
		L.RegFunction("RaycastNonAlloc6", RaycastNonAlloc6);
		L.RegFunction("RaycastNonAlloc7", RaycastNonAlloc7);
		L.RegFunction("Linecast", Linecast);
		L.RegFunction("Linecast0", Linecast0);
		L.RegFunction("Linecast1", Linecast1);
		L.RegFunction("Linecast2", Linecast2);
		L.RegFunction("Linecast3", Linecast3);
		L.RegFunction("Linecast4", Linecast4);
		L.RegFunction("Linecast5", Linecast5);
		L.RegFunction("OverlapSphere", OverlapSphere);
		L.RegFunction("OverlapSphere0", OverlapSphere0);
		L.RegFunction("OverlapSphere1", OverlapSphere1);
		L.RegFunction("OverlapSphere2", OverlapSphere2);
		L.RegFunction("OverlapSphereNonAlloc", OverlapSphereNonAlloc);
		L.RegFunction("OverlapSphereNonAlloc0", OverlapSphereNonAlloc0);
		L.RegFunction("OverlapSphereNonAlloc1", OverlapSphereNonAlloc1);
		L.RegFunction("OverlapSphereNonAlloc2", OverlapSphereNonAlloc2);
		L.RegFunction("OverlapCapsule", OverlapCapsule);
		L.RegFunction("OverlapCapsule0", OverlapCapsule0);
		L.RegFunction("OverlapCapsule1", OverlapCapsule1);
		L.RegFunction("OverlapCapsule2", OverlapCapsule2);
		L.RegFunction("OverlapCapsuleNonAlloc", OverlapCapsuleNonAlloc);
		L.RegFunction("OverlapCapsuleNonAlloc0", OverlapCapsuleNonAlloc0);
		L.RegFunction("OverlapCapsuleNonAlloc1", OverlapCapsuleNonAlloc1);
		L.RegFunction("OverlapCapsuleNonAlloc2", OverlapCapsuleNonAlloc2);
		L.RegFunction("CapsuleCast", CapsuleCast);
		L.RegFunction("CapsuleCast0", CapsuleCast0);
		L.RegFunction("CapsuleCast1", CapsuleCast1);
		L.RegFunction("CapsuleCast2", CapsuleCast2);
		L.RegFunction("CapsuleCast3", CapsuleCast3);
		L.RegFunction("CapsuleCast4", CapsuleCast4);
		L.RegFunction("CapsuleCast5", CapsuleCast5);
		L.RegFunction("CapsuleCast6", CapsuleCast6);
		L.RegFunction("CapsuleCast7", CapsuleCast7);
		L.RegFunction("SphereCast", SphereCast);
		L.RegFunction("SphereCast0", SphereCast0);
		L.RegFunction("SphereCast1", SphereCast1);
		L.RegFunction("SphereCast2", SphereCast2);
		L.RegFunction("SphereCast3", SphereCast3);
		L.RegFunction("SphereCast4", SphereCast4);
		L.RegFunction("SphereCast5", SphereCast5);
		L.RegFunction("SphereCast6", SphereCast6);
		L.RegFunction("SphereCast7", SphereCast7);
		L.RegFunction("SphereCast8", SphereCast8);
		L.RegFunction("SphereCast9", SphereCast9);
		L.RegFunction("SphereCast10", SphereCast10);
		L.RegFunction("SphereCast11", SphereCast11);
		L.RegFunction("CapsuleCastAll", CapsuleCastAll);
		L.RegFunction("CapsuleCastAll0", CapsuleCastAll0);
		L.RegFunction("CapsuleCastAll1", CapsuleCastAll1);
		L.RegFunction("CapsuleCastAll2", CapsuleCastAll2);
		L.RegFunction("CapsuleCastAll3", CapsuleCastAll3);
		L.RegFunction("CapsuleCastNonAlloc", CapsuleCastNonAlloc);
		L.RegFunction("CapsuleCastNonAlloc0", CapsuleCastNonAlloc0);
		L.RegFunction("CapsuleCastNonAlloc1", CapsuleCastNonAlloc1);
		L.RegFunction("CapsuleCastNonAlloc2", CapsuleCastNonAlloc2);
		L.RegFunction("CapsuleCastNonAlloc3", CapsuleCastNonAlloc3);
		L.RegFunction("SphereCastAll", SphereCastAll);
		L.RegFunction("SphereCastAll0", SphereCastAll0);
		L.RegFunction("SphereCastAll1", SphereCastAll1);
		L.RegFunction("SphereCastAll2", SphereCastAll2);
		L.RegFunction("SphereCastAll3", SphereCastAll3);
		L.RegFunction("SphereCastAll4", SphereCastAll4);
		L.RegFunction("SphereCastAll5", SphereCastAll5);
		L.RegFunction("SphereCastAll6", SphereCastAll6);
		L.RegFunction("SphereCastAll7", SphereCastAll7);
		L.RegFunction("SphereCastNonAlloc", SphereCastNonAlloc);
		L.RegFunction("SphereCastNonAlloc0", SphereCastNonAlloc0);
		L.RegFunction("SphereCastNonAlloc1", SphereCastNonAlloc1);
		L.RegFunction("SphereCastNonAlloc2", SphereCastNonAlloc2);
		L.RegFunction("SphereCastNonAlloc3", SphereCastNonAlloc3);
		L.RegFunction("SphereCastNonAlloc4", SphereCastNonAlloc4);
		L.RegFunction("SphereCastNonAlloc5", SphereCastNonAlloc5);
		L.RegFunction("SphereCastNonAlloc6", SphereCastNonAlloc6);
		L.RegFunction("SphereCastNonAlloc7", SphereCastNonAlloc7);
		L.RegFunction("CheckSphere", CheckSphere);
		L.RegFunction("CheckSphere0", CheckSphere0);
		L.RegFunction("CheckSphere1", CheckSphere1);
		L.RegFunction("CheckSphere2", CheckSphere2);
		L.RegFunction("CheckCapsule", CheckCapsule);
		L.RegFunction("CheckCapsule0", CheckCapsule0);
		L.RegFunction("CheckCapsule1", CheckCapsule1);
		L.RegFunction("CheckCapsule2", CheckCapsule2);
		L.RegFunction("CheckBox", CheckBox);
		L.RegFunction("CheckBox0", CheckBox0);
		L.RegFunction("CheckBox1", CheckBox1);
		L.RegFunction("CheckBox2", CheckBox2);
		L.RegFunction("CheckBox3", CheckBox3);
		L.RegFunction("OverlapBox", OverlapBox);
		L.RegFunction("OverlapBox0", OverlapBox0);
		L.RegFunction("OverlapBox1", OverlapBox1);
		L.RegFunction("OverlapBox2", OverlapBox2);
		L.RegFunction("OverlapBox3", OverlapBox3);
		L.RegFunction("OverlapBoxNonAlloc", OverlapBoxNonAlloc);
		L.RegFunction("OverlapBoxNonAlloc0", OverlapBoxNonAlloc0);
		L.RegFunction("OverlapBoxNonAlloc1", OverlapBoxNonAlloc1);
		L.RegFunction("OverlapBoxNonAlloc2", OverlapBoxNonAlloc2);
		L.RegFunction("OverlapBoxNonAlloc3", OverlapBoxNonAlloc3);
		L.RegFunction("BoxCastAll", BoxCastAll);
		L.RegFunction("BoxCastAll0", BoxCastAll0);
		L.RegFunction("BoxCastAll1", BoxCastAll1);
		L.RegFunction("BoxCastAll2", BoxCastAll2);
		L.RegFunction("BoxCastAll3", BoxCastAll3);
		L.RegFunction("BoxCastAll4", BoxCastAll4);
		L.RegFunction("BoxCastNonAlloc", BoxCastNonAlloc);
		L.RegFunction("BoxCastNonAlloc0", BoxCastNonAlloc0);
		L.RegFunction("BoxCastNonAlloc1", BoxCastNonAlloc1);
		L.RegFunction("BoxCastNonAlloc2", BoxCastNonAlloc2);
		L.RegFunction("BoxCastNonAlloc3", BoxCastNonAlloc3);
		L.RegFunction("BoxCastNonAlloc4", BoxCastNonAlloc4);
		L.RegFunction("BoxCast", BoxCast);
		L.RegFunction("BoxCast0", BoxCast0);
		L.RegFunction("BoxCast1", BoxCast1);
		L.RegFunction("BoxCast2", BoxCast2);
		L.RegFunction("BoxCast3", BoxCast3);
		L.RegFunction("BoxCast4", BoxCast4);
		L.RegFunction("BoxCast5", BoxCast5);
		L.RegFunction("BoxCast6", BoxCast6);
		L.RegFunction("BoxCast7", BoxCast7);
		L.RegFunction("BoxCast8", BoxCast8);
		L.RegFunction("BoxCast9", BoxCast9);
		L.RegFunction("IgnoreCollision", IgnoreCollision);
		L.RegFunction("IgnoreCollision0", IgnoreCollision0);
		L.RegFunction("IgnoreCollision1", IgnoreCollision1);
		L.RegFunction("IgnoreLayerCollision", IgnoreLayerCollision);
		L.RegFunction("IgnoreLayerCollision0", IgnoreLayerCollision0);
		L.RegFunction("IgnoreLayerCollision1", IgnoreLayerCollision1);
		L.RegFunction("GetIgnoreLayerCollision", GetIgnoreLayerCollision);
		L.RegFunction("ComputePenetration", ComputePenetration);
		L.RegFunction("ClosestPoint", ClosestPoint);
		L.RegFunction("Simulate", Simulate);
		L.RegFunction("SyncTransforms", SyncTransforms);
		L.RegFunction("RebuildBroadphaseRegions", RebuildBroadphaseRegions);
		L.RegConstant("IgnoreRaycastLayer", 4);
		L.RegConstant("DefaultRaycastLayers", -5);
		L.RegConstant("AllLayers", -1);
		L.RegVar("gravity", get_gravity, set_gravity);
		L.RegFunction("getgravity", get_gravity);
		L.RegFunction("setgravity", set_gravityter);
		L.RegVar("defaultContactOffset", get_defaultContactOffset, set_defaultContactOffset);
		L.RegFunction("getdefaultContactOffset", get_defaultContactOffset);
		L.RegFunction("setdefaultContactOffset", set_defaultContactOffsetter);
		L.RegVar("bounceThreshold", get_bounceThreshold, set_bounceThreshold);
		L.RegFunction("getbounceThreshold", get_bounceThreshold);
		L.RegFunction("setbounceThreshold", set_bounceThresholdter);
		L.RegVar("defaultSolverIterations", get_defaultSolverIterations, set_defaultSolverIterations);
		L.RegFunction("getdefaultSolverIterations", get_defaultSolverIterations);
		L.RegFunction("setdefaultSolverIterations", set_defaultSolverIterationster);
		L.RegVar("defaultSolverVelocityIterations", get_defaultSolverVelocityIterations, set_defaultSolverVelocityIterations);
		L.RegFunction("getdefaultSolverVelocityIterations", get_defaultSolverVelocityIterations);
		L.RegFunction("setdefaultSolverVelocityIterations", set_defaultSolverVelocityIterationster);
		L.RegVar("sleepThreshold", get_sleepThreshold, set_sleepThreshold);
		L.RegFunction("getsleepThreshold", get_sleepThreshold);
		L.RegFunction("setsleepThreshold", set_sleepThresholdter);
		L.RegVar("queriesHitTriggers", get_queriesHitTriggers, set_queriesHitTriggers);
		L.RegFunction("getqueriesHitTriggers", get_queriesHitTriggers);
		L.RegFunction("setqueriesHitTriggers", set_queriesHitTriggerster);
		L.RegVar("queriesHitBackfaces", get_queriesHitBackfaces, set_queriesHitBackfaces);
		L.RegFunction("getqueriesHitBackfaces", get_queriesHitBackfaces);
		L.RegFunction("setqueriesHitBackfaces", set_queriesHitBackfacester);
		L.RegVar("interCollisionDistance", get_interCollisionDistance, set_interCollisionDistance);
		L.RegFunction("getinterCollisionDistance", get_interCollisionDistance);
		L.RegFunction("setinterCollisionDistance", set_interCollisionDistanceter);
		L.RegVar("interCollisionStiffness", get_interCollisionStiffness, set_interCollisionStiffness);
		L.RegFunction("getinterCollisionStiffness", get_interCollisionStiffness);
		L.RegFunction("setinterCollisionStiffness", set_interCollisionStiffnesster);
		L.RegVar("interCollisionSettingsToggle", get_interCollisionSettingsToggle, set_interCollisionSettingsToggle);
		L.RegFunction("getinterCollisionSettingsToggle", get_interCollisionSettingsToggle);
		L.RegFunction("setinterCollisionSettingsToggle", set_interCollisionSettingsToggleter);
		L.RegVar("autoSimulation", get_autoSimulation, set_autoSimulation);
		L.RegFunction("getautoSimulation", get_autoSimulation);
		L.RegFunction("setautoSimulation", set_autoSimulationter);
		L.RegVar("autoSyncTransforms", get_autoSyncTransforms, set_autoSyncTransforms);
		L.RegFunction("getautoSyncTransforms", get_autoSyncTransforms);
		L.RegFunction("setautoSyncTransforms", set_autoSyncTransformster);
		L.EndStaticLibs();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				return Raycast0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3>(L, 1))
			{
				return Raycast1(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Ray, float>(L, 1))
			{
				return Raycast2(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Ray, LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 1))
			{
				return Raycast3(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float>(L, 1))
			{
				return Raycast4(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 1))
			{
				return Raycast5(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Ray, float, int>(L, 1))
			{
				return Raycast6(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Ray, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float>(L, 1))
			{
				return Raycast7(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float, int>(L, 1))
			{
				return Raycast8(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float>(L, 1))
			{
				return Raycast9(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, int, uint>(L, 1))
			{
				return Raycast10(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int>(L, 1))
			{
				return Raycast11(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float, int, uint>(L, 1))
			{
				return Raycast12(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int>(L, 1))
			{
				return Raycast13(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int, uint>(L, 1))
			{
				return Raycast14(L);
			}
			else if (count == 6)
			{
				return Raycast15(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.Raycast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			var o = UnityEngine.Physics.Raycast(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			var o = UnityEngine.Physics.Raycast(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.Raycast(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit arg1;
			var o = UnityEngine.Physics.Raycast(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg1); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			var o = UnityEngine.Physics.Raycast(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg2); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit arg1;
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.Raycast(arg0, out arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg1); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast9(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg2); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast10(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast11(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit arg1;
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Raycast(arg0, out arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg1); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast12(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast13(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg2); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast14(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit arg1;
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.Raycast(arg0, out arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg1); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Raycast15(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.Raycast(arg0, arg1, out arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			if (o) ToLua.Push(L, arg2); else LuaDLL.lua_pushnil(L);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				return RaycastAll0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Ray, float>(L, 1))
			{
				return RaycastAll1(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3>(L, 1))
			{
				return RaycastAll2(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Ray, float, int>(L, 1))
			{
				return RaycastAll3(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float>(L, 1))
			{
				return RaycastAll4(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, int, uint>(L, 1))
			{
				return RaycastAll5(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, float, int>(L, 1))
			{
				return RaycastAll6(L);
			}
			else if (count == 5)
			{
				return RaycastAll7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.RaycastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			var o = UnityEngine.Physics.RaycastAll(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastAll7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.RaycastAll(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return RaycastNonAlloc0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Ray, UnityEngine.RaycastHit[], float>(L, 1))
			{
				return RaycastNonAlloc1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.RaycastHit[]>(L, 1))
			{
				return RaycastNonAlloc2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, UnityEngine.RaycastHit[], float, int>(L, 1))
			{
				return RaycastNonAlloc3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.RaycastHit[], float>(L, 1))
			{
				return RaycastNonAlloc4(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, UnityEngine.RaycastHit[], float, int, uint>(L, 1))
			{
				return RaycastNonAlloc5(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, UnityEngine.Vector3, UnityEngine.RaycastHit[], float, int>(L, 1))
			{
				return RaycastNonAlloc6(L);
			}
			else if (count == 6)
			{
				return RaycastNonAlloc7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.RaycastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit[] arg1 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 2);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit[] arg1 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit[] arg1 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			UnityEngine.RaycastHit[] arg1 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RaycastNonAlloc7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.RaycastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return Linecast0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<int>(L, 3))
			{
				return Linecast1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 3))
			{
				return Linecast2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<int, uint>(L, 3))
			{
				return Linecast3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, int>(L, 3))
			{
				return Linecast4(L);
			}
			else if (count == 5)
			{
				return Linecast5(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.Linecast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			var o = UnityEngine.Physics.Linecast(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.Linecast(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			var o = UnityEngine.Physics.Linecast(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Linecast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.Linecast(arg0, arg1, out arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Linecast5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg2;
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.Linecast(arg0, arg1, out arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphere(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return OverlapSphere0(L);
			}
			else if (count == 3)
			{
				return OverlapSphere1(L);
			}
			else if (count == 4)
			{
				return OverlapSphere2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapSphere");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphere0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.OverlapSphere(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphere1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.OverlapSphere(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphere2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.OverlapSphere(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphereNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return OverlapSphereNonAlloc0(L);
			}
			else if (count == 4)
			{
				return OverlapSphereNonAlloc1(L);
			}
			else if (count == 5)
			{
				return OverlapSphereNonAlloc2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapSphereNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphereNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			var o = UnityEngine.Physics.OverlapSphereNonAlloc(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphereNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.OverlapSphereNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapSphereNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.OverlapSphereNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return OverlapCapsule0(L);
			}
			else if (count == 4)
			{
				return OverlapCapsule1(L);
			}
			else if (count == 5)
			{
				return OverlapCapsule2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapCapsule");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsule0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.OverlapCapsule(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsule1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.OverlapCapsule(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsule2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.OverlapCapsule(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				return OverlapCapsuleNonAlloc0(L);
			}
			else if (count == 5)
			{
				return OverlapCapsuleNonAlloc1(L);
			}
			else if (count == 6)
			{
				return OverlapCapsuleNonAlloc2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapCapsuleNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Collider[] arg3 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 4);
			var o = UnityEngine.Physics.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Collider[] arg3 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapCapsuleNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Collider[] arg3 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.OverlapCapsuleNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				return CapsuleCast0(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<float>(L, 5))
			{
				return CapsuleCast1(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 5))
			{
				return CapsuleCast2(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<float, int>(L, 5))
			{
				return CapsuleCast3(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, float>(L, 5))
			{
				return CapsuleCast4(L);
			}
			else if (count == 7 && TypeChecker.CheckTypes<float, int, uint>(L, 5))
			{
				return CapsuleCast5(L);
			}
			else if (count == 7 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int>(L, 5))
			{
				return CapsuleCast6(L);
			}
			else if (count == 8)
			{
				return CapsuleCast7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CapsuleCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit arg4;
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, out arg4);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg4);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit arg4;
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, out arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg4);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit arg4;
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, out arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg4);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCast7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit arg4;
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			UnityEngine.QueryTriggerInteraction arg7 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 8);
			var o = UnityEngine.Physics.CapsuleCast(arg0, arg1, arg2, arg3, out arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg4);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return SphereCast0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<float>(L, 3))
			{
				return SphereCast1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 3))
			{
				return SphereCast2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 1))
			{
				return SphereCast3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, float, int>(L, 1))
			{
				return SphereCast4(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float>(L, 1))
			{
				return SphereCast5(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float>(L, 1))
			{
				return SphereCast6(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, float, float, int, uint>(L, 1))
			{
				return SphereCast7(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, float, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int>(L, 1))
			{
				return SphereCast8(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int>(L, 1))
			{
				return SphereCast9(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Ray, float, LuaInterface.LuaOut<UnityEngine.RaycastHit>, float, int, uint>(L, 1))
			{
				return SphereCast10(L);
			}
			else if (count == 7)
			{
				return SphereCast11(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.SphereCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit arg2;
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, out arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, out arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, out arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast9(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast10(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit arg2;
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, out arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg2);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCast11(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.SphereCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				return CapsuleCastAll0(L);
			}
			else if (count == 5)
			{
				return CapsuleCastAll1(L);
			}
			else if (count == 6)
			{
				return CapsuleCastAll2(L);
			}
			else if (count == 7)
			{
				return CapsuleCastAll3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CapsuleCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			var o = UnityEngine.Physics.CapsuleCastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastAll3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.CapsuleCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 5)
			{
				return CapsuleCastNonAlloc0(L);
			}
			else if (count == 6)
			{
				return CapsuleCastNonAlloc1(L);
			}
			else if (count == 7)
			{
				return CapsuleCastNonAlloc2(L);
			}
			else if (count == 8)
			{
				return CapsuleCastNonAlloc3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CapsuleCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 5);
			var o = UnityEngine.Physics.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CapsuleCastNonAlloc3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.Vector3 arg3 = ToLua.ToVector3(L, 4);
			UnityEngine.RaycastHit[] arg4 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			UnityEngine.QueryTriggerInteraction arg7 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 8);
			var o = UnityEngine.Physics.CapsuleCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return SphereCastAll0(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3>(L, 1))
			{
				return SphereCastAll1(L);
			}
			else if (count == 3 && TypeChecker.CheckTypes<UnityEngine.Ray, float, float>(L, 1))
			{
				return SphereCastAll2(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, float>(L, 1))
			{
				return SphereCastAll3(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, float, int>(L, 1))
			{
				return SphereCastAll4(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, float, int>(L, 1))
			{
				return SphereCastAll5(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, float, float, int, uint>(L, 1))
			{
				return SphereCastAll6(L);
			}
			else if (count == 6)
			{
				return SphereCastAll7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.SphereCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastAll7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.SphereCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return SphereCastNonAlloc0(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, UnityEngine.RaycastHit[]>(L, 1))
			{
				return SphereCastNonAlloc1(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Ray, float, UnityEngine.RaycastHit[], float>(L, 1))
			{
				return SphereCastNonAlloc2(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, UnityEngine.RaycastHit[], float>(L, 1))
			{
				return SphereCastNonAlloc3(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Ray, float, UnityEngine.RaycastHit[], float, int>(L, 1))
			{
				return SphereCastNonAlloc4(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Vector3, float, UnityEngine.Vector3, UnityEngine.RaycastHit[], float, int>(L, 1))
			{
				return SphereCastNonAlloc5(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Ray, float, UnityEngine.RaycastHit[], float, int, uint>(L, 1))
			{
				return SphereCastNonAlloc6(L);
			}
			else if (count == 7)
			{
				return SphereCastNonAlloc7(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.SphereCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Ray arg0 = ToLua.ToRay(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.RaycastHit[] arg2 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SphereCastNonAlloc7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.SphereCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSphere(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return CheckSphere0(L);
			}
			else if (count == 3)
			{
				return CheckSphere1(L);
			}
			else if (count == 4)
			{
				return CheckSphere2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CheckSphere");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSphere0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Physics.CheckSphere(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSphere1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.CheckSphere(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckSphere2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			int arg2 = (int)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.CheckSphere(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCapsule(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return CheckCapsule0(L);
			}
			else if (count == 4)
			{
				return CheckCapsule1(L);
			}
			else if (count == 5)
			{
				return CheckCapsule2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CheckCapsule");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCapsule0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = UnityEngine.Physics.CheckCapsule(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCapsule1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.CheckCapsule(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckCapsule2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.CheckCapsule(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBox(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return CheckBox0(L);
			}
			else if (count == 3)
			{
				return CheckBox1(L);
			}
			else if (count == 4)
			{
				return CheckBox2(L);
			}
			else if (count == 5)
			{
				return CheckBox3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.CheckBox");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBox0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			var o = UnityEngine.Physics.CheckBox(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBox1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			var o = UnityEngine.Physics.CheckBox(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBox2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.CheckBox(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CheckBox3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.CheckBox(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return OverlapBox0(L);
			}
			else if (count == 3)
			{
				return OverlapBox1(L);
			}
			else if (count == 4)
			{
				return OverlapBox2(L);
			}
			else if (count == 5)
			{
				return OverlapBox3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapBox");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			var o = UnityEngine.Physics.OverlapBox(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			var o = UnityEngine.Physics.OverlapBox(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Physics.OverlapBox(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBox3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			int arg3 = (int)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg4 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.OverlapBox(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return OverlapBoxNonAlloc0(L);
			}
			else if (count == 4)
			{
				return OverlapBoxNonAlloc1(L);
			}
			else if (count == 5)
			{
				return OverlapBoxNonAlloc2(L);
			}
			else if (count == 6)
			{
				return OverlapBoxNonAlloc3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.OverlapBoxNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			var o = UnityEngine.Physics.OverlapBoxNonAlloc(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			var o = UnityEngine.Physics.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int OverlapBoxNonAlloc3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Collider[] arg2 = ToLua.ToObjectArray<UnityEngine.Collider>(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			int arg4 = (int)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.QueryTriggerInteraction arg5 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.OverlapBoxNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return BoxCastAll0(L);
			}
			else if (count == 4)
			{
				return BoxCastAll1(L);
			}
			else if (count == 5)
			{
				return BoxCastAll2(L);
			}
			else if (count == 6)
			{
				return BoxCastAll3(L);
			}
			else if (count == 7)
			{
				return BoxCastAll4(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.BoxCastAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			var o = UnityEngine.Physics.BoxCastAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			var o = UnityEngine.Physics.BoxCastAll(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.BoxCastAll(arg0, arg1, arg2, arg3, arg4);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.BoxCastAll(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastAll4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.BoxCastAll(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				return BoxCastNonAlloc0(L);
			}
			else if (count == 5)
			{
				return BoxCastNonAlloc1(L);
			}
			else if (count == 6)
			{
				return BoxCastNonAlloc2(L);
			}
			else if (count == 7)
			{
				return BoxCastNonAlloc3(L);
			}
			else if (count == 8)
			{
				return BoxCastNonAlloc4(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.BoxCastNonAlloc");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			var o = UnityEngine.Physics.BoxCastNonAlloc(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			var o = UnityEngine.Physics.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCastNonAlloc4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit[] arg3 = ToLua.ToStructArray<UnityEngine.RaycastHit>(L, 4);
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			UnityEngine.QueryTriggerInteraction arg7 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 8);
			var o = UnityEngine.Physics.BoxCastNonAlloc(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return BoxCast0(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<UnityEngine.Quaternion>(L, 4))
			{
				return BoxCast1(L);
			}
			else if (count == 4 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>>(L, 4))
			{
				return BoxCast2(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<UnityEngine.Quaternion, float>(L, 4))
			{
				return BoxCast3(L);
			}
			else if (count == 5 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, UnityEngine.Quaternion>(L, 4))
			{
				return BoxCast4(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<UnityEngine.Quaternion, float, int>(L, 4))
			{
				return BoxCast5(L);
			}
			else if (count == 6 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, UnityEngine.Quaternion, float>(L, 4))
			{
				return BoxCast6(L);
			}
			else if (count == 7 && TypeChecker.CheckTypes<UnityEngine.Quaternion, float, int, uint>(L, 4))
			{
				return BoxCast7(L);
			}
			else if (count == 7 && TypeChecker.CheckTypes<LuaInterface.LuaOut<UnityEngine.RaycastHit>, UnityEngine.Quaternion, float, int>(L, 4))
			{
				return BoxCast8(L);
			}
			else if (count == 8)
			{
				return BoxCast9(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.BoxCast");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast5(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast6(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast7(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			int arg5 = (int)LuaDLL.lua_tonumber(L, 6);
			UnityEngine.QueryTriggerInteraction arg6 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast8(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int BoxCast9(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.RaycastHit arg3;
			UnityEngine.Quaternion arg4 = ToLua.ToQuaternion(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			int arg6 = (int)LuaDLL.lua_tonumber(L, 7);
			UnityEngine.QueryTriggerInteraction arg7 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 8);
			var o = UnityEngine.Physics.BoxCast(arg0, arg1, arg2, out arg3, arg4, arg5, arg6, arg7);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg3);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreCollision(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return IgnoreCollision0(L);
			}
			else if (count == 3)
			{
				return IgnoreCollision1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.IgnoreCollision");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreCollision0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.ToObject(L, 1);
			UnityEngine.Collider arg1 = (UnityEngine.Collider)ToLua.ToObject(L, 2);
			UnityEngine.Physics.IgnoreCollision(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreCollision1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.ToObject(L, 1);
			UnityEngine.Collider arg1 = (UnityEngine.Collider)ToLua.ToObject(L, 2);
			bool arg2 = LuaDLL.lua_toboolean(L, 3);
			UnityEngine.Physics.IgnoreCollision(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreLayerCollision(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return IgnoreLayerCollision0(L);
			}
			else if (count == 3)
			{
				return IgnoreLayerCollision1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Physics.IgnoreLayerCollision");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreLayerCollision0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Physics.IgnoreLayerCollision(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IgnoreLayerCollision1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
			bool arg2 = LuaDLL.lua_toboolean(L, 3);
			UnityEngine.Physics.IgnoreLayerCollision(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetIgnoreLayerCollision(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			var o = UnityEngine.Physics.GetIgnoreLayerCollision(arg0, arg1);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ComputePenetration(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 8);
			UnityEngine.Collider arg0 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 1);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 2);
			UnityEngine.Quaternion arg2 = ToLua.ToQuaternion(L, 3);
			UnityEngine.Collider arg3 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 4);
			UnityEngine.Vector3 arg4 = ToLua.ToVector3(L, 5);
			UnityEngine.Quaternion arg5 = ToLua.ToQuaternion(L, 6);
			UnityEngine.Vector3 arg6;
			float arg7;
			var o = UnityEngine.Physics.ComputePenetration(arg0, arg1, arg2, arg3, arg4, arg5, out arg6, out arg7);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg6);
			LuaDLL.lua_pushnumber(L, arg7);
			return 3;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPoint(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Collider arg1 = (UnityEngine.Collider)ToLua.CheckObject<UnityEngine.Collider>(L, 2);
			UnityEngine.Vector3 arg2 = ToLua.ToVector3(L, 3);
			UnityEngine.Quaternion arg3 = ToLua.ToQuaternion(L, 4);
			var o = UnityEngine.Physics.ClosestPoint(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Simulate(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.Simulate(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SyncTransforms(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 0);
			UnityEngine.Physics.SyncTransforms();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int RebuildBroadphaseRegions(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Bounds arg0 = ToLua.ToBounds(L, 1);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.RebuildBroadphaseRegions(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_gravity(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Physics.gravity);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultContactOffset(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics.defaultContactOffset);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_bounceThreshold(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics.bounceThreshold);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultSolverIterations(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.Physics.defaultSolverIterations);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_defaultSolverVelocityIterations(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.Physics.defaultSolverVelocityIterations);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sleepThreshold(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics.sleepThreshold);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_queriesHitTriggers(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics.queriesHitTriggers);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_queriesHitBackfaces(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics.queriesHitBackfaces);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interCollisionDistance(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics.interCollisionDistance);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interCollisionStiffness(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Physics.interCollisionStiffness);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interCollisionSettingsToggle(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics.interCollisionSettingsToggle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoSimulation(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics.autoSimulation);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_autoSyncTransforms(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.Physics.autoSyncTransforms);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gravity(IntPtr L)
	{
		try
		{
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Physics.gravity = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_gravityter(IntPtr L)
	{
		try
		{
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 1);
			UnityEngine.Physics.gravity = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultContactOffset(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.defaultContactOffset = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultContactOffsetter(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.defaultContactOffset = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounceThreshold(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.bounceThreshold = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_bounceThresholdter(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.bounceThreshold = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSolverIterations(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.defaultSolverIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSolverIterationster(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.defaultSolverIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSolverVelocityIterations(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.defaultSolverVelocityIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_defaultSolverVelocityIterationster(IntPtr L)
	{
		try
		{
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.defaultSolverVelocityIterations = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sleepThreshold(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.sleepThreshold = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sleepThresholdter(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.sleepThreshold = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesHitTriggers(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics.queriesHitTriggers = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesHitTriggerster(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UnityEngine.Physics.queriesHitTriggers = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesHitBackfaces(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics.queriesHitBackfaces = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_queriesHitBackfacester(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UnityEngine.Physics.queriesHitBackfaces = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionDistance(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.interCollisionDistance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionDistanceter(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.interCollisionDistance = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionStiffness(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			UnityEngine.Physics.interCollisionStiffness = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionStiffnesster(IntPtr L)
	{
		try
		{
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Physics.interCollisionStiffness = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionSettingsToggle(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics.interCollisionSettingsToggle = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interCollisionSettingsToggleter(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UnityEngine.Physics.interCollisionSettingsToggle = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSimulation(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics.autoSimulation = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSimulationter(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UnityEngine.Physics.autoSimulation = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSyncTransforms(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			UnityEngine.Physics.autoSyncTransforms = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_autoSyncTransformster(IntPtr L)
	{
		try
		{
			bool arg0 = LuaDLL.luaL_checkboolean(L, 1);
			UnityEngine.Physics.autoSyncTransforms = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

