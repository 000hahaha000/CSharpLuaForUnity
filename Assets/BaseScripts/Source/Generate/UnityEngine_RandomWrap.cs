//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_RandomWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Random), typeof(System.Object));
		L.RegFunction("InitState", InitState);
		L.RegFunction("Range", Range);
		L.RegFunction("Range0", Range0);
		L.RegFunction("Range1", Range1);
		L.RegFunction("ColorHSV", ColorHSV);
		L.RegFunction("ColorHSV0", ColorHSV0);
		L.RegFunction("ColorHSV1", ColorHSV1);
		L.RegFunction("ColorHSV2", ColorHSV2);
		L.RegFunction("ColorHSV3", ColorHSV3);
		L.RegFunction("ColorHSV4", ColorHSV4);
		L.RegFunction("New", _CreateUnityEngine_Random);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("state", get_state, set_state);
		L.RegFunction("getstate", get_state);
		L.RegFunction("setstate", set_stateter);
		L.RegVar("value", get_value, null);
		L.RegFunction("getvalue", get_value);
		L.RegVar("insideUnitSphere", get_insideUnitSphere, null);
		L.RegFunction("getinsideUnitSphere", get_insideUnitSphere);
		L.RegVar("insideUnitCircle", get_insideUnitCircle, null);
		L.RegFunction("getinsideUnitCircle", get_insideUnitCircle);
		L.RegVar("onUnitSphere", get_onUnitSphere, null);
		L.RegFunction("getonUnitSphere", get_onUnitSphere);
		L.RegVar("rotation", get_rotation, null);
		L.RegFunction("getrotation", get_rotation);
		L.RegVar("rotationUniform", get_rotationUniform, null);
		L.RegFunction("getrotationUniform", get_rotationUniform);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Random(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				var obj = new UnityEngine.Random();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Random.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InitState(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 1);
			UnityEngine.Random.InitState(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Range(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<float, float>(L, 1))
			{
				return Range0(L);
			}
			else if (count == 2 && TypeChecker.CheckTypes<int, int>(L, 1))
			{
				return Range1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Random.Range");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Range0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Random.Range(arg0, arg1);
			LuaDLL.lua_pushnumber(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Range1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
			int arg1 = (int)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Random.Range(arg0, arg1);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				return ColorHSV0(L);
			}
			else if (count == 2)
			{
				return ColorHSV1(L);
			}
			else if (count == 4)
			{
				return ColorHSV2(L);
			}
			else if (count == 6)
			{
				return ColorHSV3(L);
			}
			else if (count == 8)
			{
				return ColorHSV4(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Random.ColorHSV");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var o = UnityEngine.Random.ColorHSV();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			var o = UnityEngine.Random.ColorHSV(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = UnityEngine.Random.ColorHSV(arg0, arg1, arg2, arg3);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			var o = UnityEngine.Random.ColorHSV(arg0, arg1, arg2, arg3, arg4, arg5);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ColorHSV4(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			float arg0 = (float)LuaDLL.lua_tonumber(L, 1);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg4 = (float)LuaDLL.lua_tonumber(L, 5);
			float arg5 = (float)LuaDLL.lua_tonumber(L, 6);
			float arg6 = (float)LuaDLL.lua_tonumber(L, 7);
			float arg7 = (float)LuaDLL.lua_tonumber(L, 8);
			var o = UnityEngine.Random.ColorHSV(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_state(IntPtr L)
	{
		try
		{
			ToLua.PushValue(L, UnityEngine.Random.state);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_value(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.Random.value);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_insideUnitSphere(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Random.insideUnitSphere);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_insideUnitCircle(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Random.insideUnitCircle);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_onUnitSphere(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Random.onUnitSphere);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Random.rotation);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotationUniform(IntPtr L)
	{
		try
		{
			ToLua.Push(L, UnityEngine.Random.rotationUniform);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_state(IntPtr L)
	{
		try
		{
			UnityEngine.Random.State arg0 = StackTraits<UnityEngine.Random.State>.Check(L, 2);
			UnityEngine.Random.state = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_stateter(IntPtr L)
	{
		try
		{
			UnityEngine.Random.State arg0 = StackTraits<UnityEngine.Random.State>.Check(L, 1);
			UnityEngine.Random.state = arg0;
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

