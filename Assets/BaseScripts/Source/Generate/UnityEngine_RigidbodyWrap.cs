//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_RigidbodyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.Rigidbody), typeof(UnityEngine.Component));
		L.RegFunction("SetDensity", SetDensity);
		L.RegFunction("AddForce", AddForce);
		L.RegFunction("AddForce0", AddForce0);
		L.RegFunction("AddForce1", AddForce1);
		L.RegFunction("AddForce2", AddForce2);
		L.RegFunction("AddForce3", AddForce3);
		L.RegFunction("AddRelativeForce", AddRelativeForce);
		L.RegFunction("AddRelativeForce0", AddRelativeForce0);
		L.RegFunction("AddRelativeForce1", AddRelativeForce1);
		L.RegFunction("AddRelativeForce2", AddRelativeForce2);
		L.RegFunction("AddRelativeForce3", AddRelativeForce3);
		L.RegFunction("AddTorque", AddTorque);
		L.RegFunction("AddTorque0", AddTorque0);
		L.RegFunction("AddTorque1", AddTorque1);
		L.RegFunction("AddTorque2", AddTorque2);
		L.RegFunction("AddTorque3", AddTorque3);
		L.RegFunction("AddRelativeTorque", AddRelativeTorque);
		L.RegFunction("AddRelativeTorque0", AddRelativeTorque0);
		L.RegFunction("AddRelativeTorque1", AddRelativeTorque1);
		L.RegFunction("AddRelativeTorque2", AddRelativeTorque2);
		L.RegFunction("AddRelativeTorque3", AddRelativeTorque3);
		L.RegFunction("AddForceAtPosition", AddForceAtPosition);
		L.RegFunction("AddForceAtPosition0", AddForceAtPosition0);
		L.RegFunction("AddForceAtPosition1", AddForceAtPosition1);
		L.RegFunction("AddExplosionForce", AddExplosionForce);
		L.RegFunction("AddExplosionForce0", AddExplosionForce0);
		L.RegFunction("AddExplosionForce1", AddExplosionForce1);
		L.RegFunction("AddExplosionForce2", AddExplosionForce2);
		L.RegFunction("ClosestPointOnBounds", ClosestPointOnBounds);
		L.RegFunction("GetRelativePointVelocity", GetRelativePointVelocity);
		L.RegFunction("GetPointVelocity", GetPointVelocity);
		L.RegFunction("MovePosition", MovePosition);
		L.RegFunction("MoveRotation", MoveRotation);
		L.RegFunction("Sleep", Sleep);
		L.RegFunction("IsSleeping", IsSleeping);
		L.RegFunction("WakeUp", WakeUp);
		L.RegFunction("ResetCenterOfMass", ResetCenterOfMass);
		L.RegFunction("ResetInertiaTensor", ResetInertiaTensor);
		L.RegFunction("SweepTest", SweepTest);
		L.RegFunction("SweepTest0", SweepTest0);
		L.RegFunction("SweepTest1", SweepTest1);
		L.RegFunction("SweepTest2", SweepTest2);
		L.RegFunction("SweepTestAll", SweepTestAll);
		L.RegFunction("SweepTestAll0", SweepTestAll0);
		L.RegFunction("SweepTestAll1", SweepTestAll1);
		L.RegFunction("SweepTestAll2", SweepTestAll2);
		L.RegFunction("New", _CreateUnityEngine_Rigidbody);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("velocity", get_velocity, set_velocity);
		L.RegFunction("getvelocity", get_velocity);
		L.RegFunction("setvelocity", set_velocity);
		L.RegVar("angularVelocity", get_angularVelocity, set_angularVelocity);
		L.RegFunction("getangularVelocity", get_angularVelocity);
		L.RegFunction("setangularVelocity", set_angularVelocity);
		L.RegVar("drag", get_drag, set_drag);
		L.RegFunction("getdrag", get_drag);
		L.RegFunction("setdrag", set_drag);
		L.RegVar("angularDrag", get_angularDrag, set_angularDrag);
		L.RegFunction("getangularDrag", get_angularDrag);
		L.RegFunction("setangularDrag", set_angularDrag);
		L.RegVar("mass", get_mass, set_mass);
		L.RegFunction("getmass", get_mass);
		L.RegFunction("setmass", set_mass);
		L.RegVar("useGravity", get_useGravity, set_useGravity);
		L.RegFunction("getuseGravity", get_useGravity);
		L.RegFunction("setuseGravity", set_useGravity);
		L.RegVar("maxDepenetrationVelocity", get_maxDepenetrationVelocity, set_maxDepenetrationVelocity);
		L.RegFunction("getmaxDepenetrationVelocity", get_maxDepenetrationVelocity);
		L.RegFunction("setmaxDepenetrationVelocity", set_maxDepenetrationVelocity);
		L.RegVar("isKinematic", get_isKinematic, set_isKinematic);
		L.RegFunction("getisKinematic", get_isKinematic);
		L.RegFunction("setisKinematic", set_isKinematic);
		L.RegVar("freezeRotation", get_freezeRotation, set_freezeRotation);
		L.RegFunction("getfreezeRotation", get_freezeRotation);
		L.RegFunction("setfreezeRotation", set_freezeRotation);
		L.RegVar("constraints", get_constraints, set_constraints);
		L.RegFunction("getconstraints", get_constraints);
		L.RegFunction("setconstraints", set_constraints);
		L.RegVar("collisionDetectionMode", get_collisionDetectionMode, set_collisionDetectionMode);
		L.RegFunction("getcollisionDetectionMode", get_collisionDetectionMode);
		L.RegFunction("setcollisionDetectionMode", set_collisionDetectionMode);
		L.RegVar("centerOfMass", get_centerOfMass, set_centerOfMass);
		L.RegFunction("getcenterOfMass", get_centerOfMass);
		L.RegFunction("setcenterOfMass", set_centerOfMass);
		L.RegVar("worldCenterOfMass", get_worldCenterOfMass, null);
		L.RegFunction("getworldCenterOfMass", get_worldCenterOfMass);
		L.RegVar("inertiaTensorRotation", get_inertiaTensorRotation, set_inertiaTensorRotation);
		L.RegFunction("getinertiaTensorRotation", get_inertiaTensorRotation);
		L.RegFunction("setinertiaTensorRotation", set_inertiaTensorRotation);
		L.RegVar("inertiaTensor", get_inertiaTensor, set_inertiaTensor);
		L.RegFunction("getinertiaTensor", get_inertiaTensor);
		L.RegFunction("setinertiaTensor", set_inertiaTensor);
		L.RegVar("detectCollisions", get_detectCollisions, set_detectCollisions);
		L.RegFunction("getdetectCollisions", get_detectCollisions);
		L.RegFunction("setdetectCollisions", set_detectCollisions);
		L.RegVar("position", get_position, set_position);
		L.RegFunction("getposition", get_position);
		L.RegFunction("setposition", set_position);
		L.RegVar("rotation", get_rotation, set_rotation);
		L.RegFunction("getrotation", get_rotation);
		L.RegFunction("setrotation", set_rotation);
		L.RegVar("interpolation", get_interpolation, set_interpolation);
		L.RegFunction("getinterpolation", get_interpolation);
		L.RegFunction("setinterpolation", set_interpolation);
		L.RegVar("solverIterations", get_solverIterations, set_solverIterations);
		L.RegFunction("getsolverIterations", get_solverIterations);
		L.RegFunction("setsolverIterations", set_solverIterations);
		L.RegVar("solverVelocityIterations", get_solverVelocityIterations, set_solverVelocityIterations);
		L.RegFunction("getsolverVelocityIterations", get_solverVelocityIterations);
		L.RegFunction("setsolverVelocityIterations", set_solverVelocityIterations);
		L.RegVar("sleepThreshold", get_sleepThreshold, set_sleepThreshold);
		L.RegFunction("getsleepThreshold", get_sleepThreshold);
		L.RegFunction("setsleepThreshold", set_sleepThreshold);
		L.RegVar("maxAngularVelocity", get_maxAngularVelocity, set_maxAngularVelocity);
		L.RegFunction("getmaxAngularVelocity", get_maxAngularVelocity);
		L.RegFunction("setmaxAngularVelocity", set_maxAngularVelocity);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_Rigidbody(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				var obj = new UnityEngine.Rigidbody();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.Rigidbody.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SetDensity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.SetDensity(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForce(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return AddForce0(L);
			}
			else if (count == 3)
			{
				return AddForce1(L);
			}
			else if (count == 4)
			{
				return AddForce2(L);
			}
			else if (count == 5)
			{
				return AddForce3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddForce");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForce0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.AddForce(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForce1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.ForceMode arg1 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 3);
			obj.AddForce(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForce2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.AddForce(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForce3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.ForceMode arg3 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 5);
			obj.AddForce(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeForce(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return AddRelativeForce0(L);
			}
			else if (count == 3)
			{
				return AddRelativeForce1(L);
			}
			else if (count == 4)
			{
				return AddRelativeForce2(L);
			}
			else if (count == 5)
			{
				return AddRelativeForce3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddRelativeForce");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeForce0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.AddRelativeForce(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeForce1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.ForceMode arg1 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 3);
			obj.AddRelativeForce(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeForce2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.AddRelativeForce(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeForce3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.ForceMode arg3 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 5);
			obj.AddRelativeForce(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTorque(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return AddTorque0(L);
			}
			else if (count == 3)
			{
				return AddTorque1(L);
			}
			else if (count == 4)
			{
				return AddTorque2(L);
			}
			else if (count == 5)
			{
				return AddTorque3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddTorque");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTorque0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.AddTorque(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTorque1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.ForceMode arg1 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 3);
			obj.AddTorque(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTorque2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.AddTorque(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddTorque3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.ForceMode arg3 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 5);
			obj.AddTorque(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeTorque(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return AddRelativeTorque0(L);
			}
			else if (count == 3)
			{
				return AddRelativeTorque1(L);
			}
			else if (count == 4)
			{
				return AddRelativeTorque2(L);
			}
			else if (count == 5)
			{
				return AddRelativeTorque3(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddRelativeTorque");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeTorque0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.AddRelativeTorque(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeTorque1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.ForceMode arg1 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 3);
			obj.AddRelativeTorque(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeTorque2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.AddRelativeTorque(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddRelativeTorque3(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.ForceMode arg3 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 5);
			obj.AddRelativeTorque(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForceAtPosition(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return AddForceAtPosition0(L);
			}
			else if (count == 4)
			{
				return AddForceAtPosition1(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddForceAtPosition");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForceAtPosition0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			obj.AddForceAtPosition(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddForceAtPosition1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			UnityEngine.ForceMode arg2 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 4);
			obj.AddForceAtPosition(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddExplosionForce(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 4)
			{
				return AddExplosionForce0(L);
			}
			else if (count == 5)
			{
				return AddExplosionForce1(L);
			}
			else if (count == 6)
			{
				return AddExplosionForce2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.AddExplosionForce");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddExplosionForce0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			obj.AddExplosionForce(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddExplosionForce1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			obj.AddExplosionForce(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int AddExplosionForce2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			float arg0 = (float)LuaDLL.lua_tonumber(L, 2);
			UnityEngine.Vector3 arg1 = ToLua.ToVector3(L, 3);
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			float arg3 = (float)LuaDLL.lua_tonumber(L, 5);
			UnityEngine.ForceMode arg4 = (UnityEngine.ForceMode)LuaDLL.lua_tonumber(L, 6);
			obj.AddExplosionForce(arg0, arg1, arg2, arg3, arg4);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClosestPointOnBounds(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			var o = obj.ClosestPointOnBounds(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetRelativePointVelocity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			var o = obj.GetRelativePointVelocity(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetPointVelocity(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			var o = obj.GetPointVelocity(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MovePosition(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.MovePosition(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int MoveRotation(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.MoveRotation(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Sleep(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			obj.Sleep();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IsSleeping(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			var o = obj.IsSleeping();
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WakeUp(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			obj.WakeUp();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetCenterOfMass(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			obj.ResetCenterOfMass();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ResetInertiaTensor(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			var obj = (UnityEngine.Rigidbody)ToLua.CheckObject(L, 1, typeof(UnityEngine.Rigidbody));
			obj.ResetInertiaTensor();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTest(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				return SweepTest0(L);
			}
			else if (count == 4)
			{
				return SweepTest1(L);
			}
			else if (count == 5)
			{
				return SweepTest2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.SweepTest");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTest0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg1;
			var o = obj.SweepTest(arg0, out arg1);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTest1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg1;
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			var o = obj.SweepTest(arg0, out arg1, arg2);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTest2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			UnityEngine.RaycastHit arg1;
			float arg2 = (float)LuaDLL.lua_tonumber(L, 4);
			UnityEngine.QueryTriggerInteraction arg3 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 5);
			var o = obj.SweepTest(arg0, out arg1, arg2, arg3);
			LuaDLL.lua_pushboolean(L, o);
			ToLua.Push(L, arg1);
			return 2;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTestAll(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2)
			{
				return SweepTestAll0(L);
			}
			else if (count == 3)
			{
				return SweepTestAll1(L);
			}
			else if (count == 4)
			{
				return SweepTestAll2(L);
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: UnityEngine.Rigidbody.SweepTestAll");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTestAll0(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			var o = obj.SweepTestAll(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTestAll1(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			var o = obj.SweepTestAll(arg0, arg1);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SweepTestAll2(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			var obj = (UnityEngine.Rigidbody)ToLua.ToObject(L, 1);
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			float arg1 = (float)LuaDLL.lua_tonumber(L, 3);
			UnityEngine.QueryTriggerInteraction arg2 = (UnityEngine.QueryTriggerInteraction)LuaDLL.lua_tonumber(L, 4);
			var o = obj.SweepTestAll(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_velocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.velocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index velocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angularVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.angularVelocity;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angularVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_drag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.drag;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_angularDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.angularDrag;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angularDrag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_mass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.mass;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_useGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool ret = obj.useGravity;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxDepenetrationVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.maxDepenetrationVelocity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxDepenetrationVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_isKinematic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool ret = obj.isKinematic;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isKinematic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_freezeRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool ret = obj.freezeRotation;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index freezeRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_constraints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.RigidbodyConstraints ret = obj.constraints;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index constraints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_collisionDetectionMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.CollisionDetectionMode ret = obj.collisionDetectionMode;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collisionDetectionMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_centerOfMass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.centerOfMass;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index centerOfMass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_worldCenterOfMass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.worldCenterOfMass;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index worldCenterOfMass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inertiaTensorRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Quaternion ret = obj.inertiaTensorRotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertiaTensorRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_inertiaTensor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.inertiaTensor;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertiaTensor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_detectCollisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool ret = obj.detectCollisions;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index detectCollisions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 ret = obj.position;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Quaternion ret = obj.rotation;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_interpolation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.RigidbodyInterpolation ret = obj.interpolation;
			LuaDLL.lua_pushinteger(L, (int)ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index interpolation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_solverIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			int ret = obj.solverIterations;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index solverIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_solverVelocityIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			int ret = obj.solverVelocityIterations;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index solverVelocityIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_sleepThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.sleepThreshold;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sleepThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxAngularVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float ret = obj.maxAngularVelocity;
			LuaDLL.lua_pushnumber(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxAngularVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_velocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.velocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index velocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_angularVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.angularVelocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angularVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_drag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.drag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index drag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_angularDrag(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.angularDrag = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index angularDrag on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_mass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.mass = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index mass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_useGravity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.useGravity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index useGravity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxDepenetrationVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxDepenetrationVelocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxDepenetrationVelocity on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_isKinematic(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.isKinematic = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index isKinematic on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_freezeRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.freezeRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index freezeRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_constraints(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.RigidbodyConstraints arg0 = (UnityEngine.RigidbodyConstraints)LuaDLL.luaL_checknumber(L, 2);
			obj.constraints = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index constraints on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_collisionDetectionMode(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.CollisionDetectionMode arg0 = (UnityEngine.CollisionDetectionMode)LuaDLL.luaL_checknumber(L, 2);
			obj.collisionDetectionMode = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index collisionDetectionMode on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_centerOfMass(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.centerOfMass = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index centerOfMass on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inertiaTensorRotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.inertiaTensorRotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertiaTensorRotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_inertiaTensor(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.inertiaTensor = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index inertiaTensor on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_detectCollisions(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			bool arg0 = LuaDLL.luaL_checkboolean(L, 2);
			obj.detectCollisions = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index detectCollisions on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_position(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Vector3 arg0 = ToLua.ToVector3(L, 2);
			obj.position = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index position on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_rotation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.Quaternion arg0 = ToLua.ToQuaternion(L, 2);
			obj.rotation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index rotation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_interpolation(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			UnityEngine.RigidbodyInterpolation arg0 = (UnityEngine.RigidbodyInterpolation)LuaDLL.luaL_checknumber(L, 2);
			obj.interpolation = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index interpolation on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_solverIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.solverIterations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index solverIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_solverVelocityIterations(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.solverVelocityIterations = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index solverVelocityIterations on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_sleepThreshold(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.sleepThreshold = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index sleepThreshold on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_maxAngularVelocity(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			UnityEngine.Rigidbody obj = (UnityEngine.Rigidbody)o;
			float arg0 = (float)LuaDLL.luaL_checknumber(L, 2);
			obj.maxAngularVelocity = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index maxAngularVelocity on a nil value");
		}
	}
}

