//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

internal class UnityEngine_SystemInfoWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(UnityEngine.SystemInfo), typeof(System.Object));
		L.RegFunction("SupportsRenderTextureFormat", SupportsRenderTextureFormat);
		L.RegFunction("SupportsBlendingOnRenderTextureFormat", SupportsBlendingOnRenderTextureFormat);
		L.RegFunction("SupportsTextureFormat", SupportsTextureFormat);
		L.RegFunction("New", _CreateUnityEngine_SystemInfo);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("unsupportedIdentifier", get_unsupportedIdentifier, null);
		L.RegVar("batteryLevel", get_batteryLevel, null);
		L.RegFunction("getbatteryLevel", get_batteryLevel);
		L.RegVar("batteryStatus", get_batteryStatus, null);
		L.RegFunction("getbatteryStatus", get_batteryStatus);
		L.RegVar("operatingSystem", get_operatingSystem, null);
		L.RegFunction("getoperatingSystem", get_operatingSystem);
		L.RegVar("operatingSystemFamily", get_operatingSystemFamily, null);
		L.RegFunction("getoperatingSystemFamily", get_operatingSystemFamily);
		L.RegVar("processorType", get_processorType, null);
		L.RegFunction("getprocessorType", get_processorType);
		L.RegVar("processorFrequency", get_processorFrequency, null);
		L.RegFunction("getprocessorFrequency", get_processorFrequency);
		L.RegVar("processorCount", get_processorCount, null);
		L.RegFunction("getprocessorCount", get_processorCount);
		L.RegVar("systemMemorySize", get_systemMemorySize, null);
		L.RegFunction("getsystemMemorySize", get_systemMemorySize);
		L.RegVar("deviceUniqueIdentifier", get_deviceUniqueIdentifier, null);
		L.RegFunction("getdeviceUniqueIdentifier", get_deviceUniqueIdentifier);
		L.RegVar("deviceName", get_deviceName, null);
		L.RegFunction("getdeviceName", get_deviceName);
		L.RegVar("deviceModel", get_deviceModel, null);
		L.RegFunction("getdeviceModel", get_deviceModel);
		L.RegVar("supportsAccelerometer", get_supportsAccelerometer, null);
		L.RegFunction("getsupportsAccelerometer", get_supportsAccelerometer);
		L.RegVar("supportsGyroscope", get_supportsGyroscope, null);
		L.RegFunction("getsupportsGyroscope", get_supportsGyroscope);
		L.RegVar("supportsLocationService", get_supportsLocationService, null);
		L.RegFunction("getsupportsLocationService", get_supportsLocationService);
		L.RegVar("supportsVibration", get_supportsVibration, null);
		L.RegFunction("getsupportsVibration", get_supportsVibration);
		L.RegVar("supportsAudio", get_supportsAudio, null);
		L.RegFunction("getsupportsAudio", get_supportsAudio);
		L.RegVar("deviceType", get_deviceType, null);
		L.RegFunction("getdeviceType", get_deviceType);
		L.RegVar("graphicsMemorySize", get_graphicsMemorySize, null);
		L.RegFunction("getgraphicsMemorySize", get_graphicsMemorySize);
		L.RegVar("graphicsDeviceName", get_graphicsDeviceName, null);
		L.RegFunction("getgraphicsDeviceName", get_graphicsDeviceName);
		L.RegVar("graphicsDeviceVendor", get_graphicsDeviceVendor, null);
		L.RegFunction("getgraphicsDeviceVendor", get_graphicsDeviceVendor);
		L.RegVar("graphicsDeviceID", get_graphicsDeviceID, null);
		L.RegFunction("getgraphicsDeviceID", get_graphicsDeviceID);
		L.RegVar("graphicsDeviceVendorID", get_graphicsDeviceVendorID, null);
		L.RegFunction("getgraphicsDeviceVendorID", get_graphicsDeviceVendorID);
		L.RegVar("graphicsDeviceType", get_graphicsDeviceType, null);
		L.RegFunction("getgraphicsDeviceType", get_graphicsDeviceType);
		L.RegVar("graphicsUVStartsAtTop", get_graphicsUVStartsAtTop, null);
		L.RegFunction("getgraphicsUVStartsAtTop", get_graphicsUVStartsAtTop);
		L.RegVar("graphicsDeviceVersion", get_graphicsDeviceVersion, null);
		L.RegFunction("getgraphicsDeviceVersion", get_graphicsDeviceVersion);
		L.RegVar("graphicsShaderLevel", get_graphicsShaderLevel, null);
		L.RegFunction("getgraphicsShaderLevel", get_graphicsShaderLevel);
		L.RegVar("graphicsMultiThreaded", get_graphicsMultiThreaded, null);
		L.RegFunction("getgraphicsMultiThreaded", get_graphicsMultiThreaded);
		L.RegVar("supportsShadows", get_supportsShadows, null);
		L.RegFunction("getsupportsShadows", get_supportsShadows);
		L.RegVar("supportsRawShadowDepthSampling", get_supportsRawShadowDepthSampling, null);
		L.RegFunction("getsupportsRawShadowDepthSampling", get_supportsRawShadowDepthSampling);
		L.RegVar("supportsMotionVectors", get_supportsMotionVectors, null);
		L.RegFunction("getsupportsMotionVectors", get_supportsMotionVectors);
		L.RegVar("supportsRenderToCubemap", get_supportsRenderToCubemap, null);
		L.RegFunction("getsupportsRenderToCubemap", get_supportsRenderToCubemap);
		L.RegVar("supportsImageEffects", get_supportsImageEffects, null);
		L.RegFunction("getsupportsImageEffects", get_supportsImageEffects);
		L.RegVar("supports3DTextures", get_supports3DTextures, null);
		L.RegFunction("getsupports3DTextures", get_supports3DTextures);
		L.RegVar("supports2DArrayTextures", get_supports2DArrayTextures, null);
		L.RegFunction("getsupports2DArrayTextures", get_supports2DArrayTextures);
		L.RegVar("supports3DRenderTextures", get_supports3DRenderTextures, null);
		L.RegFunction("getsupports3DRenderTextures", get_supports3DRenderTextures);
		L.RegVar("supportsCubemapArrayTextures", get_supportsCubemapArrayTextures, null);
		L.RegFunction("getsupportsCubemapArrayTextures", get_supportsCubemapArrayTextures);
		L.RegVar("copyTextureSupport", get_copyTextureSupport, null);
		L.RegFunction("getcopyTextureSupport", get_copyTextureSupport);
		L.RegVar("supportsComputeShaders", get_supportsComputeShaders, null);
		L.RegFunction("getsupportsComputeShaders", get_supportsComputeShaders);
		L.RegVar("supportsInstancing", get_supportsInstancing, null);
		L.RegFunction("getsupportsInstancing", get_supportsInstancing);
		L.RegVar("supportsHardwareQuadTopology", get_supportsHardwareQuadTopology, null);
		L.RegFunction("getsupportsHardwareQuadTopology", get_supportsHardwareQuadTopology);
		L.RegVar("supports32bitsIndexBuffer", get_supports32bitsIndexBuffer, null);
		L.RegFunction("getsupports32bitsIndexBuffer", get_supports32bitsIndexBuffer);
		L.RegVar("supportsSparseTextures", get_supportsSparseTextures, null);
		L.RegFunction("getsupportsSparseTextures", get_supportsSparseTextures);
		L.RegVar("supportedRenderTargetCount", get_supportedRenderTargetCount, null);
		L.RegFunction("getsupportedRenderTargetCount", get_supportedRenderTargetCount);
		L.RegVar("supportsMultisampledTextures", get_supportsMultisampledTextures, null);
		L.RegFunction("getsupportsMultisampledTextures", get_supportsMultisampledTextures);
		L.RegVar("supportsTextureWrapMirrorOnce", get_supportsTextureWrapMirrorOnce, null);
		L.RegFunction("getsupportsTextureWrapMirrorOnce", get_supportsTextureWrapMirrorOnce);
		L.RegVar("usesReversedZBuffer", get_usesReversedZBuffer, null);
		L.RegFunction("getusesReversedZBuffer", get_usesReversedZBuffer);
		L.RegVar("npotSupport", get_npotSupport, null);
		L.RegFunction("getnpotSupport", get_npotSupport);
		L.RegVar("maxTextureSize", get_maxTextureSize, null);
		L.RegFunction("getmaxTextureSize", get_maxTextureSize);
		L.RegVar("maxCubemapSize", get_maxCubemapSize, null);
		L.RegFunction("getmaxCubemapSize", get_maxCubemapSize);
		L.RegVar("supportsAsyncCompute", get_supportsAsyncCompute, null);
		L.RegFunction("getsupportsAsyncCompute", get_supportsAsyncCompute);
		L.RegVar("supportsGPUFence", get_supportsGPUFence, null);
		L.RegFunction("getsupportsGPUFence", get_supportsGPUFence);
		L.RegVar("supportsAsyncGPUReadback", get_supportsAsyncGPUReadback, null);
		L.RegFunction("getsupportsAsyncGPUReadback", get_supportsAsyncGPUReadback);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateUnityEngine_SystemInfo(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				var obj = new UnityEngine.SystemInfo();
				ToLua.PushSealed(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: UnityEngine.SystemInfo.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SupportsRenderTextureFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.RenderTextureFormat arg0 = (UnityEngine.RenderTextureFormat)LuaDLL.luaL_checknumber(L, 1);
			var o = UnityEngine.SystemInfo.SupportsRenderTextureFormat(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SupportsBlendingOnRenderTextureFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.RenderTextureFormat arg0 = (UnityEngine.RenderTextureFormat)LuaDLL.luaL_checknumber(L, 1);
			var o = UnityEngine.SystemInfo.SupportsBlendingOnRenderTextureFormat(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int SupportsTextureFormat(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			UnityEngine.TextureFormat arg0 = (UnityEngine.TextureFormat)LuaDLL.luaL_checknumber(L, 1);
			var o = UnityEngine.SystemInfo.SupportsTextureFormat(arg0);
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_unsupportedIdentifier(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.unsupportedIdentifier);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_batteryLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushnumber(L, UnityEngine.SystemInfo.batteryLevel);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_batteryStatus(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.batteryStatus);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_operatingSystem(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.operatingSystem);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_operatingSystemFamily(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.operatingSystemFamily);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processorType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.processorType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processorFrequency(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.processorFrequency);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_processorCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.processorCount);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_systemMemorySize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.systemMemorySize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deviceUniqueIdentifier(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.deviceUniqueIdentifier);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deviceName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.deviceName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deviceModel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.deviceModel);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsAccelerometer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsAccelerometer);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsGyroscope(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsGyroscope);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsLocationService(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsLocationService);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsVibration(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsVibration);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsAudio(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsAudio);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_deviceType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.deviceType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsMemorySize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.graphicsMemorySize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceName(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.graphicsDeviceName);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceVendor(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.graphicsDeviceVendor);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.graphicsDeviceID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceVendorID(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.graphicsDeviceVendorID);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceType(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.graphicsDeviceType);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsUVStartsAtTop(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.graphicsUVStartsAtTop);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsDeviceVersion(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushstring(L, UnityEngine.SystemInfo.graphicsDeviceVersion);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsShaderLevel(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.graphicsShaderLevel);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_graphicsMultiThreaded(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.graphicsMultiThreaded);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsShadows(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsShadows);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsRawShadowDepthSampling(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsRawShadowDepthSampling);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsMotionVectors(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsMotionVectors);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsRenderToCubemap(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsRenderToCubemap);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsImageEffects(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsImageEffects);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supports3DTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supports3DTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supports2DArrayTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supports2DArrayTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supports3DRenderTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supports3DRenderTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsCubemapArrayTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsCubemapArrayTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_copyTextureSupport(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.copyTextureSupport);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsComputeShaders(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsComputeShaders);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsInstancing(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsInstancing);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsHardwareQuadTopology(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsHardwareQuadTopology);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supports32bitsIndexBuffer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supports32bitsIndexBuffer);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsSparseTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsSparseTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportedRenderTargetCount(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.supportedRenderTargetCount);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsMultisampledTextures(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.supportsMultisampledTextures);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsTextureWrapMirrorOnce(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.supportsTextureWrapMirrorOnce);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_usesReversedZBuffer(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.usesReversedZBuffer);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_npotSupport(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, (int)UnityEngine.SystemInfo.npotSupport);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxTextureSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.maxTextureSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_maxCubemapSize(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushinteger(L, UnityEngine.SystemInfo.maxCubemapSize);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsAsyncCompute(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsAsyncCompute);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsGPUFence(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsGPUFence);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_supportsAsyncGPUReadback(IntPtr L)
	{
		try
		{
			LuaDLL.lua_pushboolean(L, UnityEngine.SystemInfo.supportsAsyncGPUReadback);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

