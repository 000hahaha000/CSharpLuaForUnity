-- Generated by CSharp.lua Compiler 1.1.0
local System = System
local UnityEngine = UnityEngine
System.namespace("", function (namespace) 
  namespace.class("TestHelloWord2", function (namespace) 
    local Awake, TestCoroutine, Test
    Awake = function (this) 
      UnityEngine.Debug.Log("TestHelloWord2")
      this:StartCoroutine(TestCoroutine(this))
      MonoBehaviour.print(this:getgameObject():getname())
    end
    TestCoroutine = function (this) 
      return System.yieldIEnumerator(function (this) 
        while true do
          System.yieldReturn(UnityEngine.WaitForSeconds(1))
          MonoBehaviour.print("TestCoroutine.tick")
        end
      end, System.Object, this)
    end
    Test = function (this) 
      MonoBehaviour.print("Test")
    end
    return {
      __inherits__ = function (global) 
        return {
          global.MonoBehaviour
        }
      end, 
      Awake = Awake, 
      Test = Test
    }
  end)
end)
System.namespace("", function (namespace) 
  namespace.class("TestHelloWord", function (namespace) 
    local Awake
    Awake = function (this) 
      UnityEngine.Debug.Log("TestHelloWord")
      this:getgameObject():AddComponent(TestHelloWord2)
      local c = this:GetComponent(TestHelloWord2)
      MonoBehaviour.print(c:getname())
      c:Test()

      --List<Component> list = new List<Component>();
      local list = this:GetComponents(UnityEngine.Component)
      MonoBehaviour.print(#list)

      for _, i in System.each(list) do
        if UnityEngine.op_Inequality(i, nil) then
          MonoBehaviour.print(i:getname())
        end

        if UnityEngine.op_Implicit(i) then
        end
      end
    end
    return {
      __inherits__ = function (global) 
        return {
          global.MonoBehaviour
        }
      end, 
      Awake = Awake
    }
  end)
end)
